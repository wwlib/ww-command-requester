{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","../command-protocol/lib/command-protocol.js","src/CommandRequester.ts","src/UUID.ts","src/connection/ConnectionManager.ts","src/events/Event.ts","src/requests/RequestAPI.ts","src/requests/index.ts","src/requests/v1/Session.ts","src/requests/v1/assets/Assets.ts","src/requests/v1/assets/requesters/Assets.ts","src/requests/v1/config/Config.ts","src/requests/v1/config/requesters/Config.ts","src/requests/v1/display/Display.ts","src/requests/v1/display/requesters/Display.ts","src/requests/v1/display/requesters/Gesture.ts","src/requests/v1/expression/Expression.ts","src/requests/v1/expression/requesters/Attention.ts","src/requests/v1/expression/requesters/Look.ts","src/requests/v1/expression/requesters/Say.ts","src/requests/v1/index.ts","src/requests/v1/listen/Listen.ts","src/requests/v1/listen/requesters/HotWord.ts","src/requests/v1/listen/requesters/Listen.ts","src/requests/v1/media/Media.ts","src/requests/v1/media/requesters/Photo.ts","src/requests/v1/media/requesters/Video.ts","src/requests/v1/perception/Perception.ts","src/requests/v1/perception/requesters/FaceTrack.ts","src/requests/v1/perception/requesters/HeadTouch.ts","src/requests/v1/perception/requesters/Motion.ts","src/requests/v2/Display.ts","src/requests/v2/Listen.ts","src/requests/v2/Play.ts","src/requests/v2/SLIM.ts","src/requests/v2/emotion/ImpactEmotion.ts","src/requests/v2/emotion/index.ts","src/requests/v2/index.ts","src/requests/v2/perception/SetPresentPerson.ts","src/requests/v2/perception/index.ts","src/requests/v2/structural/Parallel.ts","src/requests/v2/structural/Sequence.ts","src/requests/v2/structural/index.ts","src/tokens/RequestToken.ts","src/utils/ExternalPromise.ts","src/index.ts"],"names":[],"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","file":"command-requester.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.commandProtocol = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PhotoEvents = {\n    TakePhoto: 'onTakePhoto'\n};\nexports.VideoEvents = {\n    VideoReady: 'onVideoReady'\n};\nexports.DisconnectReason = {\n    4000: 'Skill closed by user',\n    4001: 'Skill closed due to robot error',\n    4002: 'Incoming connection is replacing previous connection',\n    4003: 'Connection closed due to inactivity',\n    4004: 'Session closed due to reconnection time out',\n    4005: 'Session closed due to failed reconnection'\n};\nexports.DisconnectCode = {\n    HeadTouchExit: 4000,\n    RobotError: 4001,\n    NewConnection: 4002,\n    InactivityTimeout: 4003,\n    ReconnectTimeout: 4004,\n    ReconnectError: 4005,\n};\nexports.ResponseStrings = {\n    200: 'OK',\n    201: 'Created',\n    202: 'Accepted',\n    400: 'Bad Request',\n    403: 'Forbidden',\n    404: 'Not Found',\n    406: 'Not Acceptable',\n    407: 'Request Timeout',\n    409: 'Conflict',\n    412: 'Precondition Failed',\n    500: 'Internal Error',\n    503: 'Service Unavailable',\n    505: 'Version Not Supported',\n    506: 'Version Conflict'\n};\nexports.AttentionMode = {\n    Off: 'OFF',\n    Idle: 'IDLE',\n    Disengage: 'DISENGAGE',\n    Engaged: 'ENGAGED',\n    Speaking: 'SPEAKING',\n    Fixated: 'FIXATED',\n    Attractable: 'ATTRACTABLE',\n    Menu: 'MENU',\n    Command: 'COMMAND'\n};\nexports.CommandTypes = {\n    StartSession: 'StartSession',\n    GetConfig: 'GetConfig',\n    SetConfig: 'SetConfig',\n    Cancel: 'Cancel',\n    Display: 'Display',\n    SetAttention: 'SetAttention',\n    Say: 'Say',\n    Listen: 'Listen',\n    LookAt: 'LookAt',\n    TakePhoto: 'TakePhoto',\n    Video: 'Video',\n    Subscribe: 'Subscribe',\n    FetchAsset: 'FetchAsset',\n    UnloadAsset: 'UnloadAsset'\n};\nexports.AsyncCommandEvent = {\n    Start: \"onStart\",\n    Stop: \"onStop\",\n    Error: \"onError\",\n};\nexports.DisplayEvents = {\n    ViewStateChange: 'onViewStateChange'\n};\nexports.ViewStates = {\n    Opened: 'Opened',\n    Closed: 'Closed'\n};\nexports.DisplayViewType = {\n    Eye: 'Eye',\n    Text: 'Text',\n    Image: 'Image',\n    Empty: 'Empty',\n};\nexports.LookAtEvents = {\n    LookAtAchieved: 'onLookAtAchieved',\n    TrackEntityLost: 'onTrackEntityLost'\n};\nexports.HotWordEvents = {\n    HotWordHeard: 'onHotWordHeard',\n    ListenResult: 'onListenResult'\n};\nexports.StreamTypes = {\n    Entity: 'Entity',\n    HotWord: 'HotWord',\n    HeadTouch: 'HeadTouch',\n    Motion: 'Motion',\n    ScreenGesture: 'ScreenGesture'\n};\nexports.ListenEvents = {\n    ListenResult: 'onListenResult'\n};\nexports.ListenStopReasons = {\n    NoInput: 'NoInput',\n    NoMatch: 'NoMatch',\n    Interrupted: 'Interrupted'\n};\nexports.EntityTrackEvents = {\n    TrackUpdate: 'onEntityUpdate',\n    TrackLost: 'onEntityLost',\n    TrackGained: 'onEntityGained',\n};\nexports.MotionEvents = {\n    MotionDetected: 'onMotionDetected'\n};\nexports.HeadTouchEvents = {\n    HeadTouched: 'onHeadTouch'\n};\nexports.ScreenGestureEvents = {\n    Tap: 'onTap',\n    Swipe: 'onSwipe'\n};\nexports.ConfigEvents = {\n    onConfig: 'onConfig'\n};\nexports.FetchAssetEvents = {\n    AssetReady: 'onAssetReady',\n    AssetFailed: 'onAssetFailed'\n};\nexports.UnloadAssetEvents = {\n    UnloadAssetDone: 'onUnloadAssetDone',\n    UnloadAssetFailed: 'onUnloadAssetFailed'\n};\nexports.CameraResolution = {\n    HighRes: 'highRes',\n    MedRes: 'medRes',\n    LowRes: 'lowRes',\n    MicroRes: 'microRes'\n};\nexports.SwipeDirection = {\n    Up: 'Up',\n    Down: 'Down',\n    Right: 'Right',\n    Left: 'Left'\n};\nexports.Camera = {\n    Left: 'left',\n    Right: 'right'\n};\nexports.EntityType = {\n    Person: 'person',\n    Unknown: 'unknown'\n};\nexports.DisplayErrorDetails = {\n    IdNotUnique: 'View id is not unique',\n    MissingValues: 'View was not given required values',\n    InvalidViewType: 'View type is not valid',\n    AssetError: 'Unable to access assets for display',\n};\nexports.DisplayChangeType = {\n    Swap: 'Swap',\n};\nexports.FetchAssetErrorDetails = {\n    OutOfMemory: 'Out of memory',\n    InvalidURI: 'Invalid or Inaccessible URI'\n};\nexports.UnloadAssetErrorDetails = {\n    InvalidName: 'Invalid or Inaccessible Name'\n};\nexports.ResponseCode = {\n    OK: 200,\n    Created: 201,\n    Accepted: 202,\n    BadRequest: 400,\n    Forbidden: 403,\n    NotFound: 404,\n    NotAcceptable: 406,\n    RequestTimeout: 407,\n    Conflict: 409,\n    PreconditionFailed: 412,\n    InternalError: 500,\n    ServiceUnavailable: 503,\n    VersionNotSupported: 505,\n    VersionConflict: 506\n};\nexports.VideoType = {\n    Normal: 'NORMAL',\n    Debug: 'DEBUG'\n};\nexports.ProtocolVersions = {\n    v1: '1.0',\n    v2: '2.0'\n};\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isEvent(message) {\n    return message.hasOwnProperty('EventBody');\n}\nexports.isEvent = isEvent;\nfunction isAcknowledgement(message) {\n    return message.hasOwnProperty('Response');\n}\nexports.isAcknowledgement = isAcknowledgement;\nfunction isAngleTarget(target) {\n    return target.hasOwnProperty('Angle');\n}\nexports.isAngleTarget = isAngleTarget;\nfunction isEntityTarget(target) {\n    return target.hasOwnProperty('Entity');\n}\nexports.isEntityTarget = isEntityTarget;\nfunction isPositionTarget(target) {\n    return target.hasOwnProperty('Position');\n}\nexports.isPositionTarget = isPositionTarget;\nfunction isCameraTarget(target) {\n    return target.hasOwnProperty('ScreenCoords');\n}\nexports.isCameraTarget = isCameraTarget;\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Enums\"));\nconst typeguards = require(\"./TypeGuards\");\nexports.typeguards = typeguards;\n\n},{\"./Enums\":1,\"./TypeGuards\":2}]},{},[3])(3)\n});\n\n//# sourceMappingURL=command-protocol.js.map\n","import ConnectionManager from './connection/ConnectionManager';\nimport IConnection, {MessageEvent} from './connection/IConnection';\nimport RequestToken from './tokens/RequestToken';\nimport { v1 } from './requests';\nimport Session = v1.session.Session;\nimport Expression = v1.expression.Expression;\nimport Display = v1.display.Display;\nimport Listen = v1.listen.Listen;\nimport Media = v1.media.Media;\nimport Perception = v1.perception.Perception;\nimport Assets = v1.assets.Assets;\nimport Config = v1.config.Config;\nimport {typeguards} from '@jibo/command-protocol';\nimport {Event} from './events/Event';\nimport {generateTransactionID} from './UUID';\nimport {HotWords} from './requests/v1/listen/requesters/HotWord';\n\n\n/**\n * Entry point for the Remote Client Protocol\n * @class CommandRequester\n * @example\n * const commandRequester = new CommandRequester();\n * commandRequester.disconnected.on((data) => {\n *     console.log('Connection closed because', data);\n * });\n * await commandRequester.connect(robotName);\n */\nexport class CommandRequester {\n    public assets:Assets;\n    public config:Config;\n    public display:Display;\n    public expression:Expression;\n    public listen: Listen;\n    public media:Media;\n    public perception:Perception;\n\n    /**\n     * ID for the app\n     * @name CommandRequester#AppID\n     * @type string\n     * @intdocs\n     */\n    public AppID:string;\n\n    /**\n     * Event emitted when the connection is closed by the robot or a connection issue as\n     * <br /> ```Event<{code:number, reason:string}>``` \n     * @name CommandRequester#disconnected\n     * @type Event<number, string>\n     */\n    public disconnected: Event<{code:number, reason:string}>;\n\n    private session:Session;\n    private sessionId:string;\n    private robotVersion:string;\n    private connection:IConnection;\n    private robotName:string;\n    private inProgressTokens:Map<string, RequestToken<any, any>>;\n\n    constructor() {\n        this.robotVersion = '1.0';\n        this.AppID = '';\n        this.sessionId = null;\n        this.inProgressTokens = new Map();\n        this.connection = new ConnectionManager();\n        this.connection.message.on(this.onMessage.bind(this));\n        this.connection.disconnected.on((data) => {\n            this.disconnected.emit({code:data.code, reason: data.reason});\n        });\n        this.assets = new Assets(this);\n        this.config = new Config(this);\n        this.display = new Display(this);\n        this.expression = new Expression(this);\n        this.listen = new Listen(this);\n        this.media = new Media(this);\n        this.perception = new Perception(this);\n        this.session = new Session(this);\n        this.disconnected = new Event('Disconnected');\n    }\n\n    /**\n     * Connect to the specified robot. Overridden in the native languages\n     * @method CommandRequester#connect\n     * @param  {string}        robotName your-friendly-robot-name\n     * @return {Promise<void>}\n     * @intdocs\n     */\n    public connect(robotName:string, options?: any):Promise<void> {\n\n        this.robotName = robotName;\n        console.log('CommandRequester : connect');\n        return (this.connection as ConnectionManager).connect(robotName, options)\n        .then(() => {\n            console.log('CommandRequester : connected, start session');\n            //eat result of connect, start session with robot\n            const token = this.session.start();\n            return token.complete.then((result) => {\n                console.log('CommandRequester : session started, result: ', result);\n                //get the session data that we need, then the connection is complete and robot is ready\n                this.robotVersion = result.ResponseBody.Version;\n                this.sessionId = result.ResponseBody.SessionID;\n            });\n        });\n    }\n\n    /**\n     * Disconnect all active robot connections.\n     * Overridden in the native languages.\n     * @method CommandRequester#disconnect\n     * @intdocs\n     */\n    public disconnect():void {\n        this.connection.close();\n    }\n\n    /*\n     * Send request for the specified asset\n     * @method CommandRequester#sendAssetRequest\n     * @param {string}        uri      URI for the asset to request\n     * @param {AssetCallback} callback `http.IncomingMessage`\n     */\n    // public sendAssetRequest(uri:string, callback:AssetCallback) {\n    //     this.connection.sendAssetRequestTo(this.robotName, uri, callback);\n    // }\n\n    private generateTransactionID():string {\n        return generateTransactionID();\n    }\n\n    /**\n     * @private\n     */\n    public sendRequest(command:JIBO.v1.BaseCommand):string {\n        //TODO: Actual current IP address here\n        const requestId = this.generateTransactionID();\n        const header:JIBO.v1.RequestHeader = {\n            TransactionID: requestId,\n            SessionID: this.sessionId,\n            Version: this.robotVersion,\n            Credentials: null,\n            AppID: this.AppID\n        };\n        //Send the request!\n        this.connection.sendTo(this.robotName, {\n            ClientHeader:header,\n            Command: command as any\n        });\n        //return the id to be applied to the token\n        return requestId;\n    }\n\n    /**\n     * @private\n     */\n    public sendToken(token:RequestToken<any>):void {\n        //Send the request!\n        token.requestId = this.sendRequest(token.protocol);\n        //Retain tokens as in progress requests, and handle their responses\n        if (!token.isComplete) {\n            this.inProgressTokens.set(token.requestId, token);\n        }\n    }\n\n    private onMessage(data: MessageEvent) {\n        const response = data.data;\n        let id:string = null;\n        let ack:JIBO.v1.Acknowledgement = null;\n        let event:JIBO.v1.EventMessage = null;\n        if (typeguards.isAcknowledgement(response)) {\n            id = response.ResponseHeader.TransactionID;\n            ack = response;\n        } else if(typeguards.isEvent(response)) {\n            id = response.EventHeader.TransactionID;\n            event = response;\n        } else {\n            //Invalid?\n            return;\n        }\n        //go through active tokens to see who gets what\n        if (this.inProgressTokens.has(id)) {\n            const token = this.inProgressTokens.get(id);\n            if (ack) {\n                token.handleAck(ack);\n            } else {\n                token.handleEvent(event);\n            }\n            if (token.isComplete) {\n                this.inProgressTokens.delete(id);\n            }\n        }\n    }\n}\n\n// Merge interfaces with classes to have interfaces available as CommandRequester.namespace.interface\nexport namespace CommandRequester {\n\n    /**\n     * Definition for making Jibo twist to a certain angle\n     * @interface CommandRequester.AngleVector\n     * @prop theta {number} Twist/horizontal angle\n     * @prop psi {number} Vertical angle\n     */\n    export interface AngleVector {\n        theta: number;\n        psi: number;\n    }\n\n    /**\n     * Definition for a point on Jibo's screen\n     * @interface CommandRequester.Vector2\n     * @prop x {number} Horizontal pixels\n     * @prop y {number} Vertical pixels\n     */\n    export interface Vector2 {\n        x: number;\n        y: number;\n    }\n\n    /**\n     * Definition for a 3D point in space\n     * @interface CommandRequester.Vector3\n     * @prop x {number} Meters forward\n     * @prop y {number} Meters left\n     * @prop z {number} Meters up\n     */ \n    export interface Vector3 {\n        x: number;\n        y: number;\n        z: number;\n    }\n\n    export namespace listen {\n        export import HotWord = HotWords;\n    }\n\n    export namespace media {\n\n        /**\n         * Which camera to use\n         * @typedef CommandRequester.media.Camera\n         * @prop left {'Left'} Default; Use for photo-taking \n         * @prop right {'Right'} Unsupported\n         */\n        export enum Camera {\n            left = 'Left',\n            right = 'Right',\n        }\n\n        /**\n         * Enum of photo resolution options\n         * @typedef CommandRequester.media.CameraResolution\n         * @prop high {'highRes'} Currently unsupported\n         * @prop med {'medRes'} Higher res than default\n         * @prop low {'lowRes'} Default\n         * @prop micro {'microRes'} Lower res than default\n         */\n        export enum CameraResolution {\n            high = 'highRes',\n            med = 'medRes',\n            low = 'lowRes',\n            micro = 'microRes',\n        }\n\n        /**\n         * Enum of video type options\n         * @typedef CommandRequester.media.VideoType\n         * @prop normal {'NORMAL'} Default\n         * @prop debug {'DEBUG'} Currently unsupported\n         */\n        export enum VideoType {\n            normal = 'NORMAL',\n            /** Currently unsupported */\n            debug = 'DEBUG',\n        }\n    }\n\n    export namespace config {\n\n        /**\n         * Robot configuration options that can be set by your app\n         * @interface CommandRequester.config.SetConfigOptions\n         * @prop mixer {number} Volume between 0 (mute) and 1 (loudest)\n         */\n        export interface SetConfigOptions {\n            mixer: number;\n        }\n    }\n\n    export namespace expression {\n\n        /**\n         * What type of lookAt Jibo should perform: \n         * <br /> `\"ANGLE\" | \"ENTITY\" | \"POSITION\" | \"CAMERA\"`\n         * @typedef CommandRequester.expression.LookAtTargetType\n         */\n        export type LookAtTargetType = \"ANGLE\" | \"ENTITY\" | \"POSITION\" | \"CAMERA\";\n    \n        /**\n         * Base interface for lookAt targets\n         * @interface CommandRequester.expression.BaseLookAtTarget\n         * @prop type {CommandRequester.expression.LookAtTargetType} Type of lookAt to perform\n         * @prop levelHead {boolean} `true` to keep Jibo's head level while he moves\n         */\n        export interface BaseLookAtTarget {\n            type: LookAtTargetType;\n            levelHead: boolean;\n        }\n    \n        /**\n         * Interface for looking towards an angle.\n         * @interface CommandRequester.expression.Angle\n         * @extends CommandRequester.expression.BaseLookAtTarget\n         * @prop type=\"ANGLE\" {CommandRequester.expression.LookAtTargetType}\n         * @prop angle {CommandRequester.AngleVector} Angle to twist to look towards.\n         */        \n        export interface Angle extends BaseLookAtTarget {\n            type: \"ANGLE\";\n            angle: AngleVector;\n        }\n\n        /**\n         * Interface for looking at a face (entity)\n         * @interface CommandRequester.expression.LookAtEntity\n         * @extends CommandRequester.expression.BaseLookAtTarget\n         * @prop type=\"ENTITY\" {CommandRequester.expression.LookAtTargetType}\n         * @prop target {number} ID of the face (entity) to look toward.\n         */\n        export interface LookAtEntity extends BaseLookAtTarget {\n            type: \"ENTITY\";\n            target: number;\n        }\n    \n        /**\n         * Interface for looking towards a 3D position in space\n         * @interface CommandRequester.expression.Position\n         * @extends CommandRequester.expression.BaseLookAtTarget\n         * @prop type=\"POSITION\" {CommandRequester.expression.LookAtTargetType}\n         * @prop position {CommandRequester.Vector3} 3D point in space to look toward\n         */\n        export interface Position extends BaseLookAtTarget {\n            type: \"POSITION\";\n            position: Vector3;\n        }\n    \n        /**\n         * Interface for looking towards a 2D position relative to Jibo's screen\n         * @interface CommandRequester.expression.ScreenCoords\n         * @extends CommandRequester.expression.BaseLookAtTarget\n         * @prop type=\"CAMERA\" {CommandRequester.expression.LookAtTargetType}\n         * @prop coords {CommandRequester.Vector2} 2D pixel point on Jibo's screen to look toward\n         */\n        export interface ScreenCoords extends BaseLookAtTarget {\n            type: \"CAMERA\";\n            coords: Vector2;\n        }\n    \n        /**\n         * Type of lookAt target\n         * @typedef CommandRequester.expression.LookAtTarget\n         * @prop Angle {CommandRequester.expression.Angle} Twist/angle target\n         * @prop LookAtEntity {CommandRequester.expression.LookAtEntity} Face target\n         * @prop Position {CommandRequester.expression.Position} 3D position target\n         * @prop ScreenCoords {CommandRequester.expression.ScreenCoords} 2D pixel target\n         */\n        export type LookAtTarget = Angle | LookAtEntity | Position | ScreenCoords;\n    \n        /**\n         * Enum of Jibo's available attention modes.\n         * @typedef CommandRequester.expression.AttentionMode\n         * @prop Off\n         * @prop Idle\n         * @prop Disengage\n         * @prop Engaged\n         * @prop Speaking\n         * @prop Fixated\n         * @prop Attractable\n         * @prop Menu\n         * @prop Command\n         */\n        export enum AttentionMode {\n            Off = 'OFF',\n            Idle = 'IDLE',\n            Disengage = 'DISENGAGE',\n            Engaged = 'ENGAGED',\n            Speaking = 'SPEAKING',\n            Fixated = 'FIXATED',\n            Attractable = 'ATTRACTABLE',\n            Menu = 'MENU',\n            Command = 'COMMAND',\n        }\n    }\n\n    export namespace display {\n\n        /**\n         * Options for listening for screen gestures\n         * @interface CommandRequester.display.ScreenGestureFilter\n         * @prop [area] {CommandRequester.display.Circle | CommandRequester.display.Rectangle} Area in which to listen for a screen gesture\n         * @prop [type] {CommandRequester.display.ScreenGestureType} Type of gesture to listen for\n         */\n        export interface ScreenGestureFilter {\n            area?: Circle | Rectangle;\n            type?: ScreenGestureType;\n        }\n        \n        /**\n         * Definition for a circular area on Jibo's screen\n         * @interface CommandRequester.display.Circle\n         * @prop radius {number} Radius of the circle in pixels\n         * @prop x {number} Horizontal coordinate of the circle's center in pixels\n         * @prop y {number} Vertical coordinate of the circle's center in pixels\n         */\n        export interface Circle {\n            radius: number;\n            x: number;\n            y: number;\n        }\n\n        /**\n         * Definition for a rectangular area on Jibo's screen\n         * @interface CommandRequester.display.Rectangle\n         * @prop height {number} Height of the rectangle in pixels\n         * @prop width {number} Width of the rectangle in pixels\n         * @prop x {number} Horizontal coordinate of the top-left corner of the rectangle in pixels\n         * @prop y {number} Vertical coordinate of the top-left corner of the rectangle in pixels\n         */\n        export interface Rectangle {\n            height: number;\n            width: number;\n            x: number;\n            y: number;\n        }\n\n        /**\n         * Enum of screen gesture types\n         * @typedef CommandRequester.display.ScreenGestureType\n         * @prop Tap 'TAP' A tap on Jibo's screen\n         * @prop SwipeUp 'SWIPEUP' A swipe from bottom to top on Jibo's screen\n         * @prop SwipeDown 'SWIPEDOWN' A swipe from top to bottom on Jibo's screen\n         * @prop SwipeLeft 'SWIPELEFT' A swipe from right to left on Jibo's screen\n         * @prop SwipeRight 'SWIPERIGHT' A swipe from left to right on Jibo's screen\n         */\n        export enum ScreenGestureType {\n            Tap = 'TAP',\n            SwipeUp = 'SWIPEUP',\n            SwipeDown = 'SWIPEDOWN',\n            SwipeLeft = 'SWIPELEFT',\n            SwipeRight = 'SWIPERIGHT',\n        }\n\n        /**\n         * Data object for image info\n         * @interface CommandRequester.display.ImageData\n         * @prop name {string} Provide a unique name for the asset in the local cache\n         * @prop [set] {string} Previously defined name of set of asssets to add this asset to\n         * @prop src {string} URL to the image\n         */\n        export interface ImageData {\n            name: string;\n            set?: string;\n            src: string;\n        }\n    }\n}","declare const uuid;\nexport function generateTransactionID() {\n    if(typeof process === 'object') {\n        const crypto = require('crypto');\n        const hashSource = 'hi' + process.hrtime();\n        return crypto.createHash('md5').update(hashSource).digest('hex');\n    }\n    return uuid.v4().split('-').join('');\n}","import {Event} from '../events/Event';\nimport WebSocketType = require('ws');\nimport {ConnectionEvent, DisconnectEvent, MessageEvent} from './IConnection';\nconst PORT = 8160;\nconst NODE = typeof process === 'object';\n\nexport interface HandshakeMessage {\n    type: 'handshake';\n    status: 'OK';\n    name: string;\n}\n\nexport interface ConnectionSettings {\n    hostname: string;\n    port?: number;\n    key?: string;\n    cert?: string;\n    fingerprint?: string;\n}\n\nexport default class ConnectionManager {\n    public connected: Event<ConnectionEvent>;\n    public disconnected: Event<DisconnectEvent>;\n    public message: Event<MessageEvent>;\n\n    private namedConnections: {[key: string]: WebSocket|WebSocketType};\n\n    constructor() {\n        this.onConnection = this.onConnection.bind(this);\n        this.onClose = this.onClose.bind(this);\n\n        this.namedConnections = {};\n        this.connected = new Event('Connected');\n        this.disconnected = new Event('Disconnected');\n        this.message = new Event('Message Received');\n    }\n\n    public connect(robotName:string, options:any):Promise<ConnectionEvent> {\n        if (this.isConnected(robotName)) {\n            return Promise.resolve({robot:robotName});\n        }\n\n        return new Promise((resolve, reject) => {\n            this.connected.on(resolve);\n            this.startWebSocket({hostname: robotName, ...options}, (err) => {\n                this.connected.off(resolve);\n                reject(err);\n            });\n        });\n    }\n\n    public close():void {\n        for (let robot in this.namedConnections) {\n            this.namedConnections[robot].close();\n        }\n        this.namedConnections = {};\n    }\n\n    public isConnected(name: string):boolean {\n        return name in this.namedConnections;\n    }\n\n    public sendTo(name: string, command: JIBO.v1.Command):void {\n        if (!this.isConnected(name)){\n            return;\n        }\n\n        //don't care about knowing when the send completes\n        if (NODE) {\n            (this.namedConnections[name] as WebSocketType).send(JSON.stringify(command));\n        } else {\n            (this.namedConnections[name] as WebSocket).send(JSON.stringify(command));\n        }\n    }\n\n    // public sendAssetRequestTo(name:string, uri:string, callback:AssetCallback) {\n    //     const http = require('http');\n    //     http.request({\n    //         hostname: name,\n    //         port: PORT,\n    //         path: uri,\n    //     }, callback).end();\n    // }\n\n    private startWebSocket(settings:ConnectionSettings, onError?: Function): void {\n        const {hostname} = settings;\n        const port = settings.port || PORT;\n        const protocol = settings.cert ? 'wss' : 'ws';\n        const connectionString: string = `${protocol}://${hostname}:${port}`;\n        const options = settings.cert\n            ? {\n                key: settings.key,\n                cert: settings.cert,\n                rejectUnauthorized: false,\n            }\n            : {};\n        if (this.namedConnections[hostname]) {\n            try {\n                this.namedConnections[hostname].close();\n            } catch (e) {\n                //this error would be odd, but we'll ignore it as it would be user (dev) facing\n            }\n            this.namedConnections[hostname] = null;\n        }\n        try {\n            let websocket: WebSocket | WebSocketType;\n            if(NODE) {\n                const WebSocket: typeof WebSocketType = require('ws');\n                websocket = this.namedConnections[hostname] = new WebSocket(connectionString, options);\n            }\n            else {\n                websocket = this.namedConnections[hostname] = new WebSocket(connectionString);\n            }\n            const errorCallback = (e):any => {\n                if (onError){\n                    onError(e);\n                }\n                websocket.onerror = () => { return; };\n                this.onClose(hostname, 0, 'Error in websocket');\n                if (NODE) {\n                    (websocket as WebSocketType).removeEventListener(\"error\", errorCallback);\n                } else {\n                    (websocket as WebSocket).removeEventListener(\"error\", errorCallback);\n                }\n            };\n            const onClose = (e) => this.onClose(hostname, e.code, e.reason);\n            if (NODE) {\n                (websocket as WebSocketType).addEventListener(\"error\", errorCallback);\n                (websocket as WebSocketType).addEventListener('open', () => {\n                    this.onConnection(hostname, websocket as WebSocketType);\n                });\n                (websocket as WebSocketType).addEventListener('close', onClose);\n            } else {\n                (websocket as WebSocket).addEventListener(\"error\", errorCallback);\n                (websocket as WebSocket).addEventListener('open', () => {\n                    this.onConnection(hostname, websocket as WebSocket);\n                });\n                (websocket as WebSocket).addEventListener('close', onClose);\n            }\n        } catch (err) {\n            this.namedConnections[hostname] = null;\n        }\n    }\n\n    private onConnection(hostname:string, ws: WebSocket|WebSocketType): void {\n        // message from Jibo\n        this.connected.emit({ robot: hostname });\n        this.namedConnections[hostname] = ws;\n        const listener = (message) => {\n            //for comaptibility between broswer and node\n            if ((message as any).data) { message = (message as any).data; }\n\n            //wait for handshake received to\n            let msg: any = JSON.parse(message.toString());\n            this.message.emit({robot:hostname, data: msg});\n        };\n        if (NODE) {\n            (ws as WebSocketType).addEventListener('message', listener);\n        } else {\n            (ws as WebSocket).addEventListener('message', listener);\n        }\n    }\n\n    private onClose(robot: string, code:number, reason:string): void {\n        if (this.namedConnections[robot]) {\n            this.disconnected.emit({robot, code, reason});\n            this.namedConnections[robot].close();\n            this.namedConnections[robot] = null;\n        }\n    }\n}\n","export interface Handler <Type> {\n  (data?: Type): void;\n}\n\nexport enum EmitterMode {\n  ALL_HANDLERS = 'ALL_HANDLERS',\n  FIRST_HANDLER = 'FIRST_HANDLER',\n  LAST_HANDLER = 'LAST_HANDLER'\n}\n\n\nexport class Event <Type> {\n\n  private _onceEvents = new Map<Handler<Type>, Handler<Type>>();\n  private _events: Handler<Type>[] = [];\n  private _maxListeners = 10;\n\n  /*\n   * Mode of order to emit events.\n   * In Stack mode, only emits to last event subscribed\n   * @type {enum}\n   */\n  private _emitterMode:EmitterMode = EmitterMode.ALL_HANDLERS;\n\n  /*\n   * Creates an Event object\n   * @param {String} name Name of event\n   */\n  constructor(public name: string) {\n\n  }\n\n  /*\n   * Returns a list of currently subscribed handlers\n   */\n  listeners(): Handler<Type>[] {\n    return this._events.slice();\n  }\n\n\n  /*\n   * Sets the maximum number of listeners\n   * @param {number} n\n   * @returns {Event} this\n   */\n  setMaxListeners(n: number) {\n    this._maxListeners = n;\n    return this;\n  }\n\n  /*\n   * Gets the maximum number of listeners\n   * @returns {number}\n   */\n  getMaxListeners() {\n    return this._maxListeners;\n  }\n\n  /*\n   * Subscribes a handler function to only the next event\n   * @return {Event} this\n   */\n  once(handler: Handler<Type>) {\n    let handlerWrapper = this._onceEvents.get(handler);\n    if (!handlerWrapper) {\n      handlerWrapper = (data) => {\n        this._onceEvents.delete(handler);\n        this.removeListener(handlerWrapper);\n        handler(data);\n      };\n      this._onceEvents.set(handler, handlerWrapper);\n    }\n\n    return this.on(handlerWrapper);\n  }\n\n  /*\n   * Subscribes a handler function to this event\n   * @return {Event} this\n   */\n  on(handler: Handler<Type>) {\n    if (this._events.length >= this._maxListeners) {\n      console.warn(`Event '${this.name}': Max listeners ${this._maxListeners} reached. `, new Error().stack);\n    }\n    this._events.push(handler);\n    return this;\n  }\n\n  /*\n   * Unsubscribes most recently added subscriber\n   * @return {Event} this\n   */\n  removeLastListener() {\n    this._events.splice(this._events.length - 1, 1);\n  }\n\n  /*\n   * Unsubscribes oldest added subscriber\n   * @return {Event} this\n   */\n  removeFirstListener() {\n    // if events is empty, no error; still gives empty array.\n    this._events.splice(0, 1);\n  }\n\n\n  /*\n   * Subscribes a handler function to this event\n   * @return {Event} this\n   */\n  addListener(handler: Handler<Type>) {\n    return this.on(handler);\n  }\n\n  /*\n   * Unsubscribes a handler function from this event\n   * @param {Handler} handler\n   * @return {Event} this\n   */\n  removeListener(handler: Handler<Type>) {\n    // We remove the handler if it has been provided through `on`\n    let index = this._events.indexOf(handler);\n    while (index !== -1) {\n      this._events.splice(index, 1);\n      index = this._events.indexOf(handler, index);\n    }\n\n    // We remove the handler if it has been provided through `once`\n    const onceHandler = this._onceEvents.get(handler);\n    if (onceHandler) {\n      let index = this._events.indexOf(onceHandler);\n      while (index !== -1) {\n        this._events.splice(index, 1);\n        index = this._events.indexOf(onceHandler, index);\n      }\n      this._onceEvents.delete(handler);\n    }\n\n    return this;\n  }\n\n  /*\n   * Unsubscribes a handler function from this event (alias for removeListener)\n   * @param {Handler} handler\n   * @return {Event} this\n   */\n  off(handler: Handler<Type>) {\n    return this.removeListener(handler);\n  }\n\n  /*\n   * Unsubscribes all handler functions from this event\n   * @return {Event} this\n   */\n  removeAllListeners() {\n    this._events = [];\n    this._onceEvents.clear();\n    return this;\n  }\n\n  /*\n   * Fires off an instance of this event with optional data\n   * @param {Type} [data] The data of the event\n   * @return {boolean} true if the event has any listeners, false otherwise\n   */\n  emit(data?: Type) {\n\n    if (this._emitterMode === EmitterMode.ALL_HANDLERS) {\n      // We start by creating a copy of handlers\n      // this is required to make sure that no handler modifies the\n      // underlying collection which could result in one or more\n      // handlers not being called\n      let copy = this.listeners();\n\n      for (let i = 0; i < copy.length; i++ ) {\n        let handler: any = copy[i] as any;\n        handler(data);\n      }\n    }\n    // Last handler only\n    else if (this._emitterMode === EmitterMode.LAST_HANDLER) {\n      let handler: any = this._events[this._events.length - 1];\n      if (handler) {\n        handler(data);\n      }\n      return !!handler;\n    }\n    // First handler only, return true if\n    else if (this._emitterMode === EmitterMode.FIRST_HANDLER) {\n      let handler: any = this._events[0];\n      if (handler) {\n        handler(data);\n      }\n      return !!handler;\n    }\n\n    return this._events.length > 0;\n  }\n\n\n  /*\n   * Sets mode to stack; event only emits to last subscriber\n   * @param {enum} mode of event to set\n   */\n  public setMode(mode:EmitterMode) {\n    if(!EmitterMode[mode]) {\n      throw new Error(\"Emitter mode of typed events must be ALL_HANDLERS, FIRST_HANDLER, or LAST_HANDLER\");\n    }\n    this._emitterMode = mode;\n  }\n\n  /*\n   * Waits for event to occur.\n   * @param {number} [timeoutMs=-1] Timeout while waiting for event\n   * @return {Promise<any>} Resolved with event payload or rejected with 'TIMEOUT' if times out\n   */\n  public waitFor(timeoutMs = -1): Promise<Type> {\n    return new Promise( (resolve, reject) => {\n      let timeoutHandle: any;\n\n      const eventHandler = data => {\n        if (timeoutHandle) {\n          clearTimeout(timeoutHandle);\n        }\n        resolve(data);\n      };\n\n      // Connect timeout handler\n      if (timeoutMs > 0) {\n        timeoutHandle = setTimeout(() => {\n          this.removeListener(eventHandler);\n          reject('TIMEOUT');\n        }, timeoutMs);\n      }\n\n      this.once(eventHandler);\n    });\n  }\n\n  /*\n   * Returns the number of listeners\n   * @returns {number}\n   */\n  listenerCount() {\n    return this._events.length;\n  }\n}","import {CommandRequester} from '../CommandRequester';\nimport RequestToken from '../tokens/RequestToken';\n\nexport default abstract class RequestAPI<R extends JIBO.v1.BaseCommand, T extends RequestToken<R>> {\n    protected owner:CommandRequester;\n\n    constructor(owner:CommandRequester) {\n        this.owner = owner;\n    }\n\n    abstract generateToken(protocol: R): T;\n\n    public sendToken(token: T): void {\n        this.owner.sendToken(token);\n    }\n}","import * as v1 from './v1';\nimport * as v2 from './v2';\n\nexport {\n    v1,\n    v2\n};","import RequestToken from '../../tokens/RequestToken';\nimport {CommandRequester} from '../../CommandRequester';\nimport RequestAPI from '../RequestAPI';\nimport {CommandTypes, ResponseCode} from '@jibo/command-protocol';\n\n/**\n * @class SessionToken\n * @description Response token for the {@link Session} class.\n * @extends RequestToken\n * @hideconstructor\n * @intdocs\n */\nexport class SessionToken extends RequestToken<JIBO.v1.SessionRequest, JIBO.v1.SessionResponse> {\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.SessionRequest) {\n        super(owner, protocol);\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n        if (ack.Response.ResponseCode === ResponseCode.OK) {\n            this.isComplete = true;\n            this._complete.resolve(ack.Response as JIBO.v1.SessionResponse);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n    }\n}\n\n/**\n * @namespace CommandRequester.session\n * @intdocs\n */\nexport class Session extends RequestAPI<JIBO.v1.SessionRequest, SessionToken> {\n\n    /**\n     * Generate Session Protocol\n     * @method CommandRequester.session#generateProtocol\n     * @returns {SessionRequest}\n     * @intdocs\n     */\n    static generateProtocol(): JIBO.v1.SessionRequest {\n        return {\n            Type: CommandTypes.StartSession\n        };\n    }\n\n    /**\n     * Start the session.\n     * @method CommandRequester.session#startSession\n     * @return {SessionToken}\n     */\n    public start():SessionToken {\n        const protocol = Session.generateProtocol();\n        return this.generateToken(protocol, true);\n    }\n\n    /**\n     * @method CommandRequester.session#generateToken\n     * @description Create SessionToken from SessionRequest protocol.\n     * @param {SessionRequest} protocol - SessionRequest protocol to generate a SessionToken from.\n     * @param {boolean} [andSend=false] - `True` if the generated SessionToken should also be sent as a request.\n     * @return {SessionToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.SessionRequest, andSend=false): SessionToken {\n        const token = new SessionToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send SessionToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.session#sendToken\n     * @param {SessionToken} token - SessionToken to send.\n     * @intdocs\n     */\n}","import {CommandRequester} from '../../../CommandRequester';\nimport {\n    Assets as AssetsRequester,\n    FetchAssetToken,\n    UnloadAssetToken,\n} from './requesters/Assets';\n\n/**\n * Commands for working with external assets\n * @namespace CommandRequester.assets\n */\nexport class Assets {\n\n    private assetsRequester: AssetsRequester;\n\n    constructor(requester:CommandRequester) {\n        this.assetsRequester = new AssetsRequester(requester);\n    }\n\n    /**\n     * Command to retrieve external asset and store in local cache by name.\n     * @method CommandRequester.assets#load\n     * @param  {string}   uri Uri where the asset to fetch is.\n     * @param  {string}   name Name that the asset will be call by.\n     * @returns {FetchAssetToken}\n     */\n    public load(uri: string, name: string): FetchAssetToken {\n        const protocol = AssetsRequester.generateLoadProtocol(uri, name);\n        return this.assetsRequester.generateToken(protocol, true) as FetchAssetToken;\n    }\n\n    /**\n     * Command to unload asset by name.\n     * @method CommandRequester.assets#unload\n     * @param  {string}   name Name of asset to unload.\n     * @return {UnloadAssetToken}\n     */\n    public unload(name: string): UnloadAssetToken {\n        const protocol = AssetsRequester.generateUnloadProtocol(name);\n        return this.assetsRequester.generateToken(protocol, true) as UnloadAssetToken;\n    }\n}\n","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport {CommandTypes, FetchAssetEvents, UnloadAssetEvents} from '@jibo/command-protocol';\n\n/**\n * @class FetchAssetToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class FetchAssetToken extends RequestToken<JIBO.v1.FetchAssetRequest, JIBO.v1.FetchAssetEvent> {\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.FetchAssetRequest) {\n        super(owner, protocol);\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n        const message = event.EventBody;\n        switch (message.Event) {\n            case FetchAssetEvents.AssetReady:\n                this.isComplete = true;\n                this._complete.resolve(message);\n                break;\n            case FetchAssetEvents.AssetFailed:\n                this.isComplete = true;\n                this._complete.reject(message);\n                break;\n        }\n    }\n}\n\n/**\n * @class UnloadAssetToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class UnloadAssetToken extends RequestToken<JIBO.v1.UnloadAssetRequest, JIBO.v1.UnloadAssetEvent> {\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.UnloadAssetRequest) {\n        super(owner, protocol);\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n        const message = event.EventBody;\n        switch (message.Event) {\n            case UnloadAssetEvents.UnloadAssetDone:\n                this.isComplete = true;\n                this._complete.resolve(message);\n                break;\n            case UnloadAssetEvents.UnloadAssetFailed:\n                this.isComplete = true;\n                this._complete.reject(message);\n                break;\n        }\n    }\n}\n\n/**\n * Internal only class for Assets\n * @class CommandRequester.assets.Assets\n * @intdocs\n */\nexport class Assets extends RequestAPI<JIBO.v1.FetchAssetRequest | JIBO.v1.UnloadAssetRequest, FetchAssetToken | UnloadAssetToken> {\n\n    /**\n     * Generate loadAsset Protocol\n     * @method CommandRequester.assets.Assets#generateLoadProtocol\n     * @param {string} uri - URI of the asset to be fetched.\n     * @param {string} name - Name given to the asset for later reference (must be unique).\n     * @returns {FetchAssetRequest}\n     * @intdocs\n     */\n    static generateLoadProtocol(uri: string, name: string): JIBO.v1.FetchAssetRequest {\n        return {\n            Type: CommandTypes.FetchAsset,\n            URI: uri,\n            Name: name\n        };\n    }\n\n    /**\n     * Generate unloadAsset Protocol\n     * @method CommandRequester.assets.Assets#generateUnloadProtocol\n     * @param {string} name - Name given to the asset for later reference (must be unique).\n     * @returns {UnloadAssetRequest}\n     * @intdocs\n     */\n    static generateUnloadProtocol(name: string): JIBO.v1.UnloadAssetRequest {\n        return {\n            Type: CommandTypes.UnloadAsset,\n            Name: name\n        };\n    }\n\n    /**\n     * @method CommandRequester.assets.Assets#generateToken\n     * @description Create FetchAssetToken from FetchAssetRequest protocol.\n     * @param {FetchAssetRequest | UnloadAssetRequest} protocol - FetchAssetRequest protocol to generate a FetchAssetToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated FetchAssetToken should also be sent as a request.\n     * @return {FetchAssetToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.FetchAssetRequest | JIBO.v1.UnloadAssetRequest, andSend=false): FetchAssetToken | UnloadAssetToken {\n        let token: FetchAssetToken | UnloadAssetToken;\n        if (protocol.Type === CommandTypes.FetchAsset) {\n            token = new FetchAssetToken(this.owner, protocol);\n        } else if (protocol.Type === CommandTypes.UnloadAsset) {\n            token = new UnloadAssetToken(this.owner, protocol);\n        }\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send FetchAssetToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.assets.Assets#sendToken\n     * @param {FetchAssetToken} token - FetchAssetToken to send.\n     * @intdocs\n     */\n}\n","import {CommandRequester} from '../../../CommandRequester';\nimport {\n    Config as ConfigRequester,\n    GetConfigToken,\n    SetConfigToken,\n} from './requesters/Config';\n\n/**\n * Commands for working with Jibo's settings and configurations\n * @namespace CommandRequester.config\n */\nexport class Config {\n\n    private configRequester: ConfigRequester;\n\n    constructor(requester:CommandRequester) {\n        this.configRequester = new ConfigRequester(requester);\n    }\n\n    /**\n     * Get robot configuration options.\n     * @method CommandRequester.config#get\n     * @return {GetConfigToken}\n     */\n    public get(): GetConfigToken {\n        const protocol = ConfigRequester.generateProtocol() as JIBO.v1.GetConfigRequest;\n        return this.configRequester.generateToken(protocol, true) as GetConfigToken;\n    }\n\n    /**\n     * Set robot configuration options.\n     * @method CommandRequester.config#set\n     * @param  {CommandRequester.config.SetConfigOptions}  options Options for settable configurations\n     * @return {SetConfigToken}\n     */\n    public set(options: CommandRequester.config.SetConfigOptions): SetConfigToken {\n        const protocol = ConfigRequester.generateProtocol({\n            Mixer: options.mixer,\n        }) as JIBO.v1.SetConfigRequest;\n        return this.configRequester.generateToken(protocol, true) as SetConfigToken;\n    }\n}","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport {CommandTypes, ConfigEvents, AsyncCommandEvent} from '@jibo/command-protocol';\n\n/**\n * @class SetConfigToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class SetConfigToken extends RequestToken<JIBO.v1.SetConfigRequest> {\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.SetConfigRequest) {\n        super(owner, protocol);\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n        switch (event.EventBody.Event) {\n            case AsyncCommandEvent.Stop:\n                this.isComplete = true;\n                this._complete.resolve();\n                break;\n            case AsyncCommandEvent.Error:\n                this.isComplete = true;\n                this._complete.reject(event.EventBody);\n                break;\n        }\n    }\n}\n\n/**\n * @class GetConfigToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class GetConfigToken extends RequestToken<JIBO.v1.GetConfigRequest, JIBO.v1.ConfigEvent> {\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.GetConfigRequest) {\n        super(owner, protocol);\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n        let message = event.EventBody;\n        switch (message.Event) {\n            case ConfigEvents.onConfig:\n                this.isComplete = true;\n                this._complete.resolve(message);\n                break;\n        }\n    }\n}\n\n/**\n * Internal only Config class\n * @class CommandRequester.config.Config\n * @intdocs\n */\nexport class Config extends RequestAPI<JIBO.v1.GetConfigRequest | JIBO.v1.SetConfigRequest, GetConfigToken | SetConfigToken> {\n\n    /**\n     * Generate Get Config Protocol\n     * @method CommandRequester.config.Config#generateProtocol\n     * @returns {SetConfigRequest | GetConfigRequest}\n     * @intdocs\n     */\n    static generateProtocol(options?: JIBO.v1.SetConfigOptions): JIBO.v1.GetConfigRequest | JIBO.v1.SetConfigRequest {\n        if(options) {\n            return {\n                Type: CommandTypes.SetConfig,\n                Options: options\n            };\n        }\n        return {\n            Type: CommandTypes.GetConfig\n        };\n    }\n\n    /**\n     * Create ConfigToken from ConfigRequest protocol.\n     * @method CommandRequester.config.Config#generateToken\n     * @param {GetConfigRequest | SetConfigRequest} protocol - ConfigRequest protocol to generate a ConfigToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated ConfigToken should also be sent as a request.\n     * @return {GetConfigToken | SetConfigRequest}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.GetConfigRequest | JIBO.v1.SetConfigRequest, andSend=false): GetConfigToken | SetConfigToken {\n        let token: GetConfigToken | SetConfigToken;\n        if(protocol.Type === CommandTypes.GetConfig) {\n            token = new GetConfigToken(this.owner, protocol);\n        } else if(protocol.Type === CommandTypes.SetConfig) {\n            token = new SetConfigToken(this.owner, protocol);\n        }\n\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send ConfigToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.config.Config#sendToken\n     * @param {GetConfigToken | SetConfigToken} token - ConfigToken to send.\n     * @intdocs\n     */\n    public sendToken(token: GetConfigToken | SetConfigToken): void {\n        this.owner.sendToken(token);\n    }\n}","import {CommandRequester} from '../../../CommandRequester';\nimport {DisplayViewType} from '@jibo/command-protocol';\nimport {Display as DisplayRequester, DisplayToken} from './requesters/Display';\nimport {Gesture, ScreenGestureToken} from './requesters/Gesture';\n\n/**\n * Commands for working with Jibo's screen\n * @namespace CommandRequester.display\n */\nexport class Display {\n    \n    private displayRequest: DisplayRequester;\n\n    /**\n     * Commands for subscribing to screen-related events\n     * @namespace CommandRequester.display.subscribe\n     */\n    public subscribe: Subscriptions;\n\n    constructor(requester:CommandRequester) {\n        this.displayRequest = new DisplayRequester(requester);\n        this.subscribe = new Subscriptions(requester);\n    }\n\n    /**\n     * Create a view that displays Jibo's eye on screen\n     * @method CommandRequester.display#EyeView\n     * @param {string} name Unique name for the EyeView\n     */\n    public EyeView(name: string):JIBO.v1.EyeView {\n        return {\n            Type: DisplayViewType.Eye,\n            Name: name\n        } as JIBO.v1.EyeView;\n    }\n\n    /**\n     * Create a view to display an image on Jibo's screen\n     * @method CommandRequester.display#ImageView\n     * @param {string} name Unique name for the ImageView\n     * @param {CommandRequester.display.ImageData} data ImageData for the image to be created in the view\n     */\n    public ImageView(name: string, data: CommandRequester.display.ImageData):JIBO.v1.ImageView {\n        return {\n            Type: DisplayViewType.Image,\n            Name: name,\n            Image: data\n        } as JIBO.v1.ImageView;\n    }\n\n    /**\n     * Create a view to display text on Jibo's screen\n     * @method CommandRequester.display#TextView\n     * @param {string} name Unique name for the TextView\n     * @param {string} text Text to be displayed\n     */\n    public TextView(name: string, text: string): JIBO.v1.TextView {\n        return {\n            Type: DisplayViewType.Text,\n            Name: name,\n            Text: text\n        } as JIBO.v1.TextView;\n    }\n\n    /**\n     * Create an empty view on Jibo's screen\n     * @method CommandRequester.display#EmptyView\n     * @param  {string} name Unique name of view.\n     */\n    public EmptyView(name:string):JIBO.v1.EmptyView {\n        return {\n            Type: DisplayViewType.Empty,\n            Name: name,\n        } as JIBO.v1.EmptyView;\n    }\n\n    /**\n     * Replace the existing view with the one given.\n     * @method CommandRequester.display#swap\n     * @param  {CommandRequester.display#EyeView | CommandRequester.display#TextView | CommandRequester.display#ImageView} view \n     * View to replace the existing one with.\n     * @return {DisplayToken}\n     */\n    public swap(\n        view: JIBO.v1.EyeView | JIBO.v1.TextView | JIBO.v1.ImageView,\n        openTransition?: JIBO.v1.DisplayTransitions.DisplayTransitionType,\n        closeTransition?: JIBO.v1.DisplayTransitions.DisplayTransitionType\n    ): DisplayToken {\n        const protocol = DisplayRequester.generateProtocol(view, openTransition, closeTransition);\n        return this.displayRequest.generateToken(protocol, true);\n    }\n}\n\nexport class Subscriptions {\n\n    private gestureRequest:Gesture;\n\n    constructor(requester: CommandRequester) {\n        this.gestureRequest = new Gesture(requester);\n    }\n    \n    /**\n     * Listen for screen touch input\n     * @method CommandRequester.display.subscribe#gesture\n     * @param  {CommandRequester.display.ScreenGestureFilter} [filter={}] Data for screen touch info\n     * @return {ScreenGestureToken}\n     */\n    gesture(filter: CommandRequester.display.ScreenGestureFilter = {}): ScreenGestureToken {\n        const filterType = filter\n            ? CommandRequester.display.ScreenGestureType[filter.type]\n            : undefined;\n        const protocol = Gesture.generateProtocol({\n            Area: filter.area,\n            Type: filterType,\n        });\n        return this.gestureRequest.generateToken(protocol, true);\n    }\n}","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport {Event} from '../../../../events/Event';\nimport {AsyncCommandEvent, ViewStates, DisplayEvents, CommandTypes} from '@jibo/command-protocol';\n\n\n/**\n * @class DisplayToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class DisplayToken extends RequestToken<JIBO.v1.DisplayRequest> {\n    /**\n     * Emitted when a display view is opened.\n     * @name DisplayToken#opened\n     * @type {Event}\n     */\n    public opened:Event<void>;\n\n\n    /** @private */\n    constructor(owner: CommandRequester, protocol: JIBO.v1.DisplayRequest) {\n        super(owner, protocol);\n        this.opened = new Event('Opened');\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n        const eventData = event.EventBody;\n        switch (eventData.Event) {\n            case AsyncCommandEvent.Stop:\n                this.isComplete = true;\n                this._complete.resolve();\n                break;\n            case AsyncCommandEvent.Error:\n                this.isComplete = true;\n                this._complete.reject(eventData);\n                break;\n            case DisplayEvents.ViewStateChange:\n                switch (eventData.State) {\n                    case ViewStates.Opened:\n                        this.opened.emit();\n                        break;\n                }\n        }\n    }\n}\n\n/**\n * Internal Display class\n * @class CommandRequester.display.Display\n * @intdocs\n */\nexport class Display extends RequestAPI<JIBO.v1.DisplayRequest, DisplayToken> {\n    \n    /**\n     * Generate Display Protocol\n     * @method CommandRequester.display.Display#generateProtocol\n     * @param {(CommandRequester.display#EyeView | CommandRequester.display#TextView | CommandRequester.display#ImageView)} view - View to replace the existing one with.\n     * @param  {DisplayTransitionType} [openTransition] Transition type to open.\n     * @param  {DisplayTransitionType} [closeTransition] Transition type to close.\n     * @returns {DisplayRequest}\n     * @intdocs\n     */\n    static generateProtocol(\n      view: JIBO.v1.EyeView | JIBO.v1.TextView | JIBO.v1.ImageView,\n      openTransition?:JIBO.v1.DisplayTransitions.DisplayTransitionType,\n      closeTransition?:JIBO.v1.DisplayTransitions.DisplayTransitionType\n    ): JIBO.v1.DisplayRequest {\n        return {\n            Type: CommandTypes.Display,\n            View: view,\n            OpenTransition: openTransition ,\n            CloseTransition: closeTransition\n        };\n    }\n\n    /**\n     * Create DisplayToken from DisplayRequest protocol.\n     * @method CommandRequester.display.Display#generateToken\n     * @param {DisplayRequest} protocol - DisplayRequest protocol to generate a DisplayToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated DisplayToken should also be sent as a request.\n     * @return {DisplayToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.DisplayRequest, andSend=false): DisplayToken {\n        const token = new DisplayToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send DisplayToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.display.Display#sendToken\n     * @param {DisplayToken} token - DisplayToken to send.\n     * @intdocs\n     */\n}","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport {Event} from '../../../../events/Event';\nimport {AsyncCommandEvent, ScreenGestureEvents, CommandTypes, StreamTypes} from '@jibo/command-protocol';\n\n\n/**\n * @class ScreenGestureToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class ScreenGestureToken extends RequestToken<JIBO.v1.ScreenGestureRequest> {\n    /**\n     * Tap screen gesture. Event is `{x: number, y: number}` of tap location.\n     * @name ScreenGestureToken#tap\n     * @type {Event<CommandRequester.Vector2>}\n     */\n    public tap:Event<JIBO.v1.Vector2>;\n\n    /**\n     * Swipe screen gesture. Type is direction of swipe.\n     * @name ScreenGestureToken#swipe\n     * @type {Event<SwipeDirection>}\n     */\n    public swipe:Event<JIBO.v1.SwipeDirections.SwipeDirectionType>;\n\n\n    /** @private */\n    constructor(owner: CommandRequester, protocol: JIBO.v1.ScreenGestureRequest) {\n        super(owner, protocol);\n        this.tap = new Event(ScreenGestureEvents.Tap);\n        this.swipe = new Event(ScreenGestureEvents.Swipe);\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n        const eventData = event.EventBody;\n        switch (eventData.Event) {\n            case AsyncCommandEvent.Stop:\n                this.isComplete = true;\n                this._complete.resolve();\n                break;\n            case AsyncCommandEvent.Error:\n                this.isComplete = true;\n                this._complete.reject(eventData);\n                break;\n            case ScreenGestureEvents.Tap:\n                 this.tap.emit(eventData.Coordinate);\n                 break;\n            case ScreenGestureEvents.Swipe:\n                 this.swipe.emit(eventData.Direction);\n                 break;\n\n        }\n    }\n}\n\n/**\n * Internal Gesture class\n * @class CommandRequester.display.subscribe.Gesture\n * @intdocs\n */\nexport class Gesture extends RequestAPI<JIBO.v1.ScreenGestureRequest, ScreenGestureToken> {\n    public owner;\n\n    constructor(requester:CommandRequester) {\n        super(requester);\n    }\n\n    /**\n     * Generate Screen Gesture Protocol\n     * @method CommandRequester.display.subscribe.Gesture#generateProtocol\n     * @param {CommandRequester.display.ScreenGestureFilter} [filter={}]\n     * @returns {ScreenGestureRequest}\n     * @intdocs\n     */\n    static generateProtocol(filter: JIBO.v1.ScreenGestureFilter = {}): JIBO.v1.ScreenGestureRequest {\n        return {\n            Type: CommandTypes.Subscribe,\n            StreamType: StreamTypes.ScreenGesture,\n            StreamFilter: filter\n        };\n    }\n\n    /**\n     * Create ScreenGestureToken from ScreenGestureRequest protocol.\n     * @method CommandRequester.display.subscribe.Gesture#generateToken\n     * @param {ScreenGestureRequest} protocol - ScreenGestureRequest protocol to generate a ScreenGestureToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated ScreenGestureToken should also be sent as a request.\n     * @return {ScreenGestureToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.ScreenGestureRequest, andSend=false): ScreenGestureToken {\n        const token = new ScreenGestureToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n\n}","import {LookToken, Look, TargetMode} from './requesters/Look';\nimport {SayToken, Say} from './requesters/Say';\nimport {AttentionToken, Attention} from './requesters/Attention';\nimport {CommandRequester} from '../../../CommandRequester';\n\n/**\n * Commands for working with Jibo's verbal and physical modes of expression\n * @namespace CommandRequester.expression\n */\nexport class Expression {\n\n    attentionRequest:Attention;\n    lookRequest:Look;\n    sayRequest:Say;\n\n    constructor(requester:CommandRequester) {\n        this.attentionRequest = new Attention(requester);\n        this.lookRequest = new Look(requester);\n        this.sayRequest = new Say(requester);\n    }\n\n    /**\n     * Make Jibo turn to look at the specified target\n     * @method CommandRequester.expression#look\n     * @param  {CommandRequester.expression.LookAtTarget} target Target to look at\n     * @param  {boolean} [shouldTrack] Currently unsupported\n     * @param  {boolean} [levelHead=true] `true` to keep Jibo's head level while he moves\n     * @return {LookToken}\n     */\n    look(\n        lookAtTarget: CommandRequester.expression.LookAtTarget,\n        shouldTrack?: boolean,\n        levelHead: boolean = true,\n    ): LookToken {\n        let protocol;\n\n        switch(lookAtTarget.type) {\n            case \"ANGLE\":\n                const angle: [number, number] = [lookAtTarget.angle.theta, lookAtTarget.angle.psi];\n                protocol = Look.generateProtocol(TargetMode.Angle, angle, levelHead, false);\n                break;\n            case \"POSITION\":\n                const position: [number, number, number] = [lookAtTarget.position.x, lookAtTarget.position.y, lookAtTarget.position.z];\n                protocol = Look.generateProtocol(TargetMode.Position, position, levelHead, false);\n                break;\n            case \"ENTITY\":\n                const target: number = lookAtTarget.target;\n                protocol = Look.generateProtocol(TargetMode.Entity, target, levelHead, false);\n                break;\n            case \"CAMERA\":\n                const coords: [number, number] = [lookAtTarget.coords.x, lookAtTarget.coords.y];\n                protocol = Look.generateProtocol(TargetMode.ScreenCoords, coords, levelHead, shouldTrack);\n                break;\n        }\n\n        return this.lookRequest.generateToken(protocol, true) as LookToken;\n    }\n\n    /**\n     * Make Jibo speak.\n     * @method CommandRequester.expression#say\n     * @param {string} text Plain text or Embodied Speech Markup Language to say. See {@link https://app-toolkit.jibo.com/esml/}.\n     * @return {SayToken}\n     */\n    public say(\n        text: string,\n        speakOptions?: JIBO.v1.SpeakOptions,\n        autoRuleConfig?: JIBO.v1.AutoRuleConfig,\n    ): SayToken {\n        const protocol = Say.generateProtocol(text, speakOptions, autoRuleConfig);\n        return this.sayRequest.generateToken(protocol, true);\n    }\n\n    /**\n     * Set Jibo's attention mode.\n     * @method CommandRequester.expression#setAttention\n     * @param {CommandRequester.expression.AttentionMode} mode Attention mode to which to set the robot\n     * @return {AttentionToken}\n     */\n    public setAttention(\n        mode: CommandRequester.expression.AttentionMode,\n    ): AttentionToken {\n        const protocol = Attention.generateProtocol(mode);\n        return this.attentionRequest.generateToken(protocol, true);\n    }\n}","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport {AsyncCommandEvent, CommandTypes} from '@jibo/command-protocol';\n\n/**\n * @class AttentionToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class AttentionToken extends RequestToken<JIBO.v1.AttentionRequest> {\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.AttentionRequest) {\n        super(owner, protocol);\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n        switch (event.EventBody.Event) {\n            case AsyncCommandEvent.Stop:\n                this.isComplete = true;\n                this._complete.resolve();\n                break;\n            case AsyncCommandEvent.Error:\n                this.isComplete = true;\n                this._complete.reject(event.EventBody);\n                break;\n        }\n    }\n}\n\n/**\n * Internal Attention class\n * @class CommandRequester.expression.Attention\n * @intdocs\n */\nexport class Attention extends RequestAPI<JIBO.v1.AttentionRequest, AttentionToken> {\n\n    /**\n     * Generate Attention Protocol\n     * @method CommandRequester.expression.Attention#generateProtocol\n     * @param {CommandRequester.expression.AttentionMode} mode - New attenion mode for the robot\n     * @returns {JIBO.v1.AttentionRequest}\n     * @intdocs\n     */\n    static generateProtocol(mode: CommandRequester.expression.AttentionMode): JIBO.v1.AttentionRequest {\n        return {\n            Type: CommandTypes.SetAttention,\n            Mode: mode,\n        } as JIBO.v1.AttentionRequest;\n    }\n\n    /**\n     * Create AttentionToken from AttentionRequest protocol.\n     * @method CommandRequester.expression.Attention#generateToken\n     * @param {AttentionRequest} protocol - AttentionRequest protocol to generate an AttentionToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated AttentionToken should also be sent as a request.\n     * @return {AttentionToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.AttentionRequest, andSend=false): AttentionToken {\n        const token = new AttentionToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send AttentionToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.expression.Attention#sendToken\n     * @param {AttentionToken} token - AttentionToken to send.\n     * @intdocs\n     */\n}\n","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport {AsyncCommandEvent, CommandTypes, LookAtEvents} from '@jibo/command-protocol';\n\n\n/**\n * Target options for Look\n * @typedef CommandRequester.expression.TargetMode\n * @prop Position\n * @prop Angle\n * @prop Entity\n * @prop Scren\n * @intdocs\n */\nexport enum TargetMode {\n    Position,\n    Angle,\n    Entity,\n    ScreenCoords\n}\n\n\nexport interface LookAtAchievedResult {\n    AngleTarget: JIBO.v1.AngleVector;\n    PositionTarget: JIBO.v1.Vector3;\n}\n\nexport interface LookAtTrackLostResult {\n    EntityTarget: JIBO.v1.LookAtEntity;\n    AngleTarget: JIBO.v1.AngleVector;\n    PositionTarget: JIBO.v1.Vector3;\n}\n\n\n/**\n * @class LookToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class LookToken extends RequestToken<JIBO.v1.LookAtRequest, LookAtAchievedResult|LookAtTrackLostResult> {\n\n    /** @private */\n    constructor(owner: CommandRequester, protocol: JIBO.v1.LookAtRequest) {\n        super(owner, protocol);\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n        const eventData = event.EventBody;\n        switch (eventData.Event) {\n            case AsyncCommandEvent.Stop:\n                this.isComplete = true;\n                this._complete.resolve();\n                break;\n            case AsyncCommandEvent.Error:\n                this.isComplete = true;\n                this._complete.reject(eventData);\n                break;\n            case LookAtEvents.LookAtAchieved:\n                this.isComplete = true;\n                this._complete.resolve(eventData);\n                break;\n            case LookAtEvents.TrackEntityLost:\n                this.isComplete = true;\n                this._complete.resolve(eventData);\n                break;\n        }\n    }\n}\n\n/**\n * Internal Look class\n * @class CommandRequester.expression.Look\n * @intdocs\n */\nexport class Look extends RequestAPI<JIBO.v1.LookAtRequest, LookToken> {\n\n    /**\n     * Generate Look Protocol\n     * @method CommandRequester.expression.Look#generateProtocol\n     * @param {CommandRequester.expression.TargetMode} targetMode - How we are targetting our target (depends on the target type)\n     * @param {(CommandRequester.Vector2|CommandRequester.Vector3|CommandRequester.expression.LookAtEntity)} target - What we're looking at (Entity, Angle or Point in space)\n     * @param {boolean} levelHead - `true` to keep Jibo's head level while he moves.\n     * @param {boolean} [shouldTrack=false] - If we should track the target entity (Entity-Mode only)\n     * @returns {LookAtRequest}\n     * @intdocs\n     */\n    static generateProtocol(\n        targetMode: TargetMode,\n        target: JIBO.v1.Vector2 | JIBO.v1.Vector3 | JIBO.v1.LookAtEntity | JIBO.v1.AngleVector,\n        levelHead: boolean,\n        shouldTrack = false): JIBO.v1.LookAtRequest {\n        let lookAtTarget:JIBO.v1.LookAtTarget;\n        switch (targetMode) {\n            case TargetMode.Position:\n                lookAtTarget = { Position: target as JIBO.v1.Vector3, type: \"POSITION\" };\n                break;\n            case TargetMode.Angle:\n                lookAtTarget = { Angle: target as JIBO.v1.AngleVector, type: \"ANGLE\" };\n                break;\n            case TargetMode.Entity:\n                lookAtTarget = { Entity: target as JIBO.v1.LookAtEntity, type: \"ENTITY\" };\n                break;\n            case TargetMode.ScreenCoords:\n                lookAtTarget = { ScreenCoords: target as JIBO.v1.Vector2, type: \"CAMERA\" };\n                break;\n        }\n        return {\n            Type: CommandTypes.LookAt,\n            LookAtTarget: lookAtTarget,\n            TrackFlag: shouldTrack,\n            LevelHeadFlag: levelHead\n        };\n    }\n\n    /**\n     * Create LookToken from LookAtRequest protocol.\n     * @method CommandRequester.expression.Look#generateToken\n     * @param {LookAtRequest} protocol - LookAtRequest protocol to generate a LookToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated LookToken should also be sent as a request.\n     * @return {LookToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.LookAtRequest, andSend=false): LookToken {\n        const token = new LookToken(this.owner, protocol);\n\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send LookToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.expression.Look#sendToken\n     * @param {LookToken} token - LookToken to send.\n     * @intdocs\n     */\n}","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport {AsyncCommandEvent, CommandTypes} from '@jibo/command-protocol';\n\n/**\n * @class SayToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class SayToken extends RequestToken<JIBO.v1.SayRequest> {\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.SayRequest) {\n        super(owner, protocol);\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n        switch (event.EventBody.Event) {\n            case AsyncCommandEvent.Stop:\n                this.isComplete = true;\n                this._complete.resolve();\n                break;\n            case AsyncCommandEvent.Error:\n                this.isComplete = true;\n                this._complete.reject(event.EventBody);\n                break;\n        }\n    }\n}\n\n/**\n * Internal Say class\n * @class CommandRequester.expression.Say\n * @intdocs\n */\nexport class Say extends RequestAPI<JIBO.v1.SayRequest, SayToken> {\n\n    /**\n     * Generate Say Protocol\n     * @method CommandRequester.expression.Say#generateProtocol\n     * @param {string} esml_uri - ESML to speak or URI of sound to say\n     * @param {JIBO.v1.SpeakOptions} [speakOptions] Options to configure , can be used in conjunction with ESML strings.\n     * @param {JIBO.v1.AutoRuleConfig} [autoRuleConfig] Configuration for AutoRules , can be used in conjunction with ESML strings.\n     * @returns {SayRequest}\n     * @intdocs\n     */\n    static generateProtocol(esmlUri: string, speakOptions?:JIBO.v1.SpeakOptions, autoRuleConfig?:JIBO.v1.AutoRuleConfig ): JIBO.v1.SayRequest {\n        return {\n            Type: CommandTypes.Say,\n            ESML: esmlUri,\n            SpeakOptions: speakOptions,\n            AutoRuleConfig: autoRuleConfig\n        };\n    }\n\n    /**\n     * Create SayToken from SayRequest protocol.\n     * @method CommandRequester.expression.Say#generateToken\n     * @param {SayRequest} protocol - SayRequest protocol to generate a SayToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated SayToken should also be sent as a request.\n     * @return {SayToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.SayRequest, andSend=false): SayToken {\n        const token = new SayToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send SayToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.expression.Say#sendToken\n     * @param {SayToken} token - SayToken to send.\n     * @intdocs\n     */\n}\n","import * as assets from './assets/Assets';\nimport * as config from './config/Config';\nimport * as display from './display/Display';\nimport * as expression from './expression/Expression';\nimport * as listen from './listen/Listen';\nimport * as media from './media/Media';\nimport * as session from './Session';\nimport * as perception from './perception/Perception';\n\nexport {\n    assets,\n    config,\n    display,\n    expression,\n    listen,\n    media,\n    perception,\n    session,\n};\n","import {CommandRequester} from '../../../CommandRequester';\nimport {Listen as ListenRequester, ListenToken} from './requesters/Listen';\nimport {HotWord, HotWords, HotWordToken} from './requesters/HotWord';\n\n/**\n * Commands for working with Jibo's listening capabilities\n * @namespace CommandRequester.listen\n */\nexport class Listen {\n\n    listenRequest: ListenRequester;\n\n    /**\n     * Commands for subscribing to listen events\n     * @namespace CommandRequester.listen.subscribe\n     */\n    subscribe: Subscriptions;\n\n    constructor(requester:CommandRequester) {\n        this.listenRequest = new ListenRequester(requester);\n        this.subscribe = new Subscriptions(requester);\n    }\n\n    /**\n     * Request for the robot to listen.\n     * @method CommandRequester.listen#start\n     * @param  {number}   [maxSpeechTimeout = 15] Max seconds to listen for speech. If speech exceeds this limit, it will be ignored \n     * (to prevent accidental listens, ie television in the background)\n     * @param  {number}   [maxNoSpeechTimeout = 15] Max seconds to wait for speech to start\n     * @param  {number}   [languageCode = en_US] Language to listen for. Only US English is currently supported.\n     * @return {ListenToken}\n     */\n    public start(\n        maxSpeechTimeout: number = 15,\n        maxNoSpeechTimeout: number = 15,\n        languageCode: string = 'en-US',\n    ): ListenToken {\n        const protocol = ListenRequester.generateProtocol(maxSpeechTimeout, maxNoSpeechTimeout, languageCode);\n        return this.listenRequest.generateToken(protocol, true) as ListenToken;\n    }\n}\n\nexport class Subscriptions {\n\n    private hotWordRequest:HotWord;\n\n    constructor(requester: CommandRequester) {\n        this.hotWordRequest = new HotWord(requester);\n    }\n    \n    /**\n     * Listen for \"Hey Jibo\" only\n     * @method CommandRequester.listen.subscribe#hotWord\n     * @param [listen=false] {boolean} Currently only `false` is supported. \n     * Coming soon: `true` to automatically start a listen after hearing \"Hey Jibo.\"\n     * @param [hotword=HEY_JIBO] Currently only \"Hey Jibo\" is supported\n     * @return {HotWordToken}\n     */\n    public hotword(listen = false, hotword = HotWords.HEY_JIBO): HotWordToken {\n        const protocol = HotWord.generateProtocol(listen, hotword);\n        return this.hotWordRequest.generateToken(protocol, true);\n    }\n}","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport {Event} from '../../../../events/Event';\nimport RequestAPI from '../../../RequestAPI';\nimport {HotWordEvents, StreamTypes, CommandTypes} from '@jibo/command-protocol';\n\nexport enum HotWords {\n    \"HEY_JIBO\" = 'hey jibo',\n}\n\n/**\n * @class HotWordToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class HotWordToken extends RequestToken<JIBO.v1.HotWordRequest> {\n\n    /**\n     * Heard \"Hey Jibo\"\n     * @name HotWordToken#hotWordHeard\n     * @type {Event}\n     */\n    hotWordHeard:Event<JIBO.v1.HotWordHeardEvent>;\n\n    /**\n     * Result of what Jibo head is available.\n     * @name HotWordToken#listenResult\n     * @type {Event<string>}\n     */\n    listenResult:Event<string>;\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.HotWordRequest) {\n        super(owner, protocol);\n        this.hotWordHeard = new Event('Heard hot word');\n        this.listenResult = new Event('Listen complete');\n    }\n\n    /**\n     * @private\n     */\n    handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    handleEvent(event:JIBO.v1.EventMessage) {\n        //handle response\n        const message = event.EventBody;\n        switch (message.Event) {\n            case HotWordEvents.HotWordHeard:\n                this.hotWordHeard.emit(message);\n                break;\n        }\n    }\n}\n\n/**\n * Internal HotWord class\n * @class CommandRequester.listen.subscribe.HotWord\n * @intdocs\n */\nexport class HotWord extends RequestAPI<JIBO.v1.HotWordRequest, HotWordToken>{\n\n    constructor(requester:CommandRequester) {\n        super(requester);\n    }\n\n    /**\n     * Generate HotWord Protocol\n     * @method CommandRequester.listen.subscribe.HotWord#generateProtocol\n     * @param {boolean} [listen=false] - Whether to listen for additional speech input after \"Hey Jibo\" is heard.\n     * @returns {HotWordRequest}\n     * @intdocs\n     */\n    static generateProtocol(listen = false, hotWord = HotWords.HEY_JIBO): JIBO.v1.HotWordRequest {\n        return {\n            Type: CommandTypes.Subscribe,\n            StreamType: StreamTypes.HotWord,\n            StreamFilter: {},\n            Listen: listen\n        };\n    }\n\n    /**\n     * Create HotWordToken from HotWordRequest protocol.\n     * @method CommandRequester.listen.subscribe.HotWord#generateToken\n     * @param {HotWordRequest} protocol - HotWordRequest protocol to generate a HotWordToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated HotWordToken should also be sent as a request.\n     * @return {HotWordToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.HotWordRequest, andSend=false): HotWordToken {\n        const token = new HotWordToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send HotWordToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.listen.subscribe.HotWord#sendToken\n     * @param {HotWordToken} token - HotWordToken to send.\n     * @intdocs\n     */\n    public sendToken(token: HotWordToken): void {\n        this.owner.sendToken(token);\n    }\n}\n","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport {Event} from '../../../../events/Event';\nimport RequestAPI from '../../../RequestAPI';\nimport {CommandTypes, ListenEvents, AsyncCommandEvent} from '@jibo/command-protocol';\n\n/**\n * @class ListenToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class ListenToken extends RequestToken<JIBO.v1.ListenRequest, JIBO.v1.ListenResultEvent | JIBO.v1.ListenStopEvent> {\n    /**\n     * Listen token was updated\n     * @name ListenToken#update\n     * @type {Event}\n     */\n    public update:Event<JIBO.v1.ListenResultEvent>;\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.ListenRequest) {\n        super(owner, protocol);\n        this.update = new Event('Update of listen status');\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n     public handleEvent(event:JIBO.v1.EventMessage) {\n         //handle event\n         const eventData = event.EventBody;\n         switch (eventData.Event) {\n             case AsyncCommandEvent.Stop:\n                 this.isComplete = true;\n                 this._complete.reject(<JIBO.v1.ListenStopEvent>eventData);\n                 break;\n             case ListenEvents.ListenResult:\n                 this.isComplete = true;\n                 this._complete.resolve(<JIBO.v1.ListenResultEvent>eventData);\n                 this.update.emit(<JIBO.v1.ListenResultEvent> eventData);\n                 break;\n             case AsyncCommandEvent.Error:\n                 this.isComplete = true;\n                 this._complete.reject(eventData);\n                 break;\n         }\n     }\n\n}\n\n/**\n * Internal Listen class\n * @class CommandRequester.listen.Listen\n * @intdocs\n */\nexport class Listen extends RequestAPI<JIBO.v1.ListenRequest, ListenToken> {\n\n    /**\n     * Generate Listen Protocol\n     * @method CommandRequester.listen.Listen#generateProtocol\n     * @param {number} [maxSpeechTimeout=15] - Max speech timeout (in seconds)\n     * @param {number} [maxNoSpeechTimeout=15] - Max no speech timeout (in seconds)\n     * @param {string} [languageCode='en-US'] - Language code\n     * @returns {ListenRequest}\n     * @intdocs\n     */\n    static generateProtocol(maxSpeechTimeout = 15, maxNoSpeechTimeout = 15, languageCode = 'en-US'): JIBO.v1.ListenRequest {\n        return {\n            Type: CommandTypes.Listen,\n            MaxSpeechTimeout: maxSpeechTimeout,\n            MaxNoSpeechTimeout: maxNoSpeechTimeout,\n            LanguageCode: languageCode\n        };\n    }\n\n    /**\n     * Create ListenToken from ListenRequest protocol.\n     * @method CommandRequester.listen.Listen#generateToken\n     * @param {ListenRequest} protocol - ListenRequest protocol to generate a ListenToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated ListenToken should also be sent as a request.\n     * @return {ListenToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.ListenRequest, andSend=false): ListenToken {\n        const token = new ListenToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send ListenToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.listen.Listen#sendToken\n     * @param {ListenToken} token - ListenToken to send.\n     * @intdocs\n     */\n}","import {Photo, PhotoToken} from './requesters/Photo';\nimport {Video, VideoToken} from './requesters/Video';\nimport {CommandRequester} from '../../../CommandRequester';\n\n/**\n * Commands for working with Jibo's media\n * @namespace CommandRequester.media\n */\nexport class Media {\n\n    /**\n     * Commands for capturing media from Jibo's cameras\n     * @namespace CommandRequester.media.capture\n     */\n    capture: Capture;\n\n    constructor(requester) {\n        this.capture = new Capture(requester);\n    }\n}\n\nexport class Capture {\n\n    photoRequest: Photo;\n    videoRequest: Video;\n\n    constructor(requester: CommandRequester) {\n        this.photoRequest = new Photo(requester);\n        this.videoRequest = new Video(requester);\n    }\n\n    /**\n     * Take a photo\n     * @method CommandRequester.media.capture#photo\n     * @param  {CommandRequester.media.Camera} [camera=left] Which camera to use\n     * @param  {CommandRequester.media.CameraResolution} [resolution=low] Choose a resolution.\n     * @param  {boolean} [distortion=true] `false` for fisheye lense.\n     * @return {PhotoToken}\n     */\n    public photo(\n        camera: CommandRequester.media.Camera = CommandRequester.media.Camera.left,\n        resolution: CommandRequester.media.CameraResolution = CommandRequester.media.CameraResolution.low,\n        distortion: boolean = true,\n    ): PhotoToken {\n        const cameraType = CommandRequester.media.Camera[camera];\n        const protocol = Photo.generateProtocol(cameraType, resolution, distortion);\n        return this.photoRequest.generateToken(protocol, true) as PhotoToken;\n    }\n\n    /**\n     * Stream what Jibo currently sees\n     * @method CommandRequester.media.capture#video\n     * @param  {CommandRequester.media.VideoType} [videoType=normal] Choose a video type\n     * @param  {number} [duration=0] How long to stream for. Currently unsupported. Call `cancel()` to stop streaming\n     * @return {VideoToken}\n     */\n    public video(\n        videoType: CommandRequester.media.VideoType = CommandRequester.media.VideoType.normal,\n        duration: number = 0,\n    ): VideoToken {\n        const protocol = Video.generateProtocol(videoType, duration);\n        return this.videoRequest.generateToken(protocol, true);\n    }\n}","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport {CommandTypes, PhotoEvents, ResponseCode} from '@jibo/command-protocol';\n\n\n/**\n * @class PhotoToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class PhotoToken extends RequestToken<JIBO.v1.TakePhotoRequest, JIBO.v1.TakePhotoEvent> {\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.TakePhotoRequest) {\n        super(owner, protocol);\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= ResponseCode.BadRequest) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle response\n        const message = event.EventBody;\n        if (message.Event === PhotoEvents.TakePhoto) {\n            this.isComplete = true;\n            this._complete.resolve(message);\n        }\n    }\n}\n\n/**\n * Internal Photo class\n * @class CommandRequester.media.capture.Photo\n * @intdocs\n */\nexport class Photo extends RequestAPI<JIBO.v1.TakePhotoRequest, PhotoToken> {\n\n    /**\n     * Generate Photo Protocol\n     * @method CommandRequester.media.capture.Photo#generateProtocol\n     * @param {Camera} [camera=left] - Which camera to use -- left or right.\n     * @param {CameraResolution} [resolution=LowRes] - Choose a resolution.\n     * @param {boolean} [removeDistortion=true] - Use `false` for fisheye lense.\n     * @returns {TakePhotoRequest}\n     * @intdocs\n     */\n    static generateProtocol(\n        camera:JIBO.v1.Cameras.CameraType = 'left',\n        resolution:JIBO.v1.CameraResolutions.CameraResolutionType = 'lowRes',\n        removeDistortion = true): JIBO.v1.TakePhotoRequest {\n        return {\n            Type: CommandTypes.TakePhoto,\n            Resolution: resolution,\n            Camera: camera,\n            Distortion: removeDistortion\n        };\n    }\n\n    /**\n     * Create PhotoToken from TakePhotoRequest protocol.\n     * @method CommandRequester.media.capture.Photo#generateToken\n     * @param {TakePhotoRequest} protocol - TakePhotoRequest protocol to generate a PhotoToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated PhotoToken should also be sent as a request.\n     * @return {PhotoToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.TakePhotoRequest, andSend=false): PhotoToken {\n        const token = new PhotoToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n}\n","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport {Event} from '../../../../events/Event';\nimport {CommandTypes, VideoEvents, ResponseCode} from '@jibo/command-protocol';\n\n/**\n * @class VideoToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class VideoToken extends RequestToken<JIBO.v1.VideoRequest, never> {\n\n    /**\n     * URL for video stream is ready.\n     * @name VideoToken#streamReady\n     * @type {Event<string>}\n     */\n    public streamReady:Event<string>;\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.VideoRequest) {\n        super(owner, protocol);\n        this.streamReady = new Event('Video ready for streaming');\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= ResponseCode.BadRequest) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle response\n        const eventData = event.EventBody;\n        if (eventData.Event === VideoEvents.VideoReady) {\n            this.streamReady.emit(eventData.URI);\n        }\n    }\n}\n\n/**\n * Internal Video class\n * @class CommandRequester.media.capture.Video\n * @intdocs\n */\nexport class Video extends RequestAPI<JIBO.v1.VideoRequest, VideoToken> {\n\n    /**\n     * Generate Video Protocol\n     * @method CommandRequester.media.capture.Video#generateProtocol\n     * @param {VideoType} [type=VideoType.Normal] - Choose a video type from the enum.\n     * @param {number} [duration=0] - How long to record for (in ms).\n     * @returns {VideoRequest}\n     * @intdocs\n     */\n    static generateProtocol(\n        type:JIBO.v1.Videos.VideoType = 'NORMAL', duration = 0): JIBO.v1.VideoRequest {\n        return {\n            Type: CommandTypes.Video,\n            Duration: duration,\n            VideoType: type\n        };\n    }\n\n    /**\n     * Create VideoToken from VideoRequest protocol.\n     * @method CommandRequester.media.capture.Video#generateToken\n     * @param {VideoRequest} protocol - VideoRequest protocol to generate a VideoToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated VideoToken should also be sent as a request.\n     * @return {VideoToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.VideoRequest, andSend=false): VideoToken {\n        const token = new VideoToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send VideoToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.media.capture.Video#sendToken\n     * @param {VideoToken} token - VideoToken to send.\n     * @intdocs\n     */\n}","import {CommandRequester} from '../../../CommandRequester';\nimport {MotionToken, Motion} from './requesters/Motion';\nimport {HeadTouchToken, HeadTouch} from './requesters/HeadTouch';\nimport {FaceTrackToken, FaceTrack} from './requesters/FaceTrack';\n\n/**\n * Commands for working with Jibo's sensory input\n * @namespace CommandRequester.perception\n */\nexport class Perception{\n\n    /**\n     * Commands for subcribing to perception events\n     * @namespace CommandRequester.perception.subscribe\n     */\n    public subscribe;\n\n    constructor(requester:CommandRequester) {\n        this.subscribe = new Subscriptions(requester);\n    }\n}\n\nexport class Subscriptions {\n\n    private motionRequest:Motion;\n    private headTouchRequest:HeadTouch;\n    private faceTrackRequest:FaceTrack;\n\n    constructor(requester: CommandRequester) {\n        this.motionRequest = new Motion(requester);\n        this.headTouchRequest = new HeadTouch(requester);\n        this.faceTrackRequest = new FaceTrack(requester);\n    }\n    \n    /**\n     * @method CommandRequester.perception.subscribe#headTouch\n     * @description Listen for head touch.\n     * @return {HeadTouchToken}\n     */\n    public headTouch(): HeadTouchToken {\n        const protocol = HeadTouch.generateProtocol();\n        return this.headTouchRequest.generateToken(protocol, true);\n    }\n\n    /**\n     * Subcribe to motion events in Jibo's field of vision\n     * @method CommandRequester.perception.subscribe#motion\n     * @return {MotionToken}\n     */\n    public motion(): MotionToken {\n        const protocol = Motion.generateProtocol();\n        return this.motionRequest.generateToken(protocol, true);\n    }\n\n    /**\n     * Subscribe to face-finding events in Jibo's field of vision\n     * @method CommandRequester.perception.subscribe#face\n     * @return {FaceTrackToken}\n     */\n    public face(): FaceTrackToken {\n        const protocol = FaceTrack.generateProtocol();\n        return this.faceTrackRequest.generateToken(protocol, true);\n    }\n}","import RequestToken from '../../../../tokens/RequestToken';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport {Event} from '../../../../events/Event';\nimport {CommandTypes, EntityTrackEvents, StreamTypes} from '@jibo/command-protocol';\n\n/**\n * @class FaceTrackToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class FaceTrackToken extends RequestToken<JIBO.v1.EntityRequest, never> {\n    /**\n     * Update on location of face being tracked.\n     * @name FaceTrackToken#update\n     * @type {Event}\n     */\n    public update:Event<JIBO.v1.TrackedEntity[]>;\n    /**\n     * New face being tracked.\n     * @name FaceTrackToken#gained\n     * @type {Event}\n     */\n    public gained:Event<JIBO.v1.TrackedEntity[]>;\n    /**\n     * Currently tracked face was lost.\n     * @name FaceTrackToken#lost\n     * @type {Event}\n     */\n    public lost:Event<JIBO.v1.TrackedEntity[]>;\n\n    constructor(owner:CommandRequester, protocol: JIBO.v1.EntityRequest) {\n        super(owner, protocol);\n        this.update = new Event('Update of tracked entities');\n        this.gained = new Event('Entity found');\n        this.lost = new Event('Entity lost');\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle response\n        const message = event.EventBody;\n        switch (message.Event) {\n            case EntityTrackEvents.TrackGained:\n                this.gained.emit(message.Tracks);\n                break;\n            case EntityTrackEvents.TrackUpdate:\n                this.update.emit(message.Tracks);\n                break;\n            case EntityTrackEvents.TrackLost:\n                this.lost.emit(message.Tracks);\n                break;\n        }\n    }\n}\n\n/**\n * Internal FaceTrack class\n * @class CommandRequester.perception.subscribe.FaceTrack\n * @intdocs\n */\nexport class FaceTrack extends RequestAPI<JIBO.v1.EntityRequest, FaceTrackToken> {\n\n    /**\n     * Generate Face Track Protocol\n     * @method CommandRequester.perception.subscribe.FaceTrack#generateProtocol\n     * @returns {EntityRequest}\n     * @intdocs\n     */\n    static generateProtocol(): JIBO.v1.EntityRequest {\n        return {\n            Type: CommandTypes.Subscribe,\n            StreamType: StreamTypes.Entity,\n            StreamFilter: {}\n        };\n    }\n\n    /**\n     * Create FaceTrackToken from EntityRequest protocol.\n     * @method CommandRequester.perception.subscribe.FaceTrack#generateToken\n     * @param {EntityRequest} protocol - EntityRequest protocol to generate a FaceTrackToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated FaceTrackToken should also be sent as a request.\n     * @return {FaceTrackToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.EntityRequest, andSend=false): FaceTrackToken {\n        const token = new FaceTrackToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send FaceTrackToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.perception.subscribe.FaceTrack#sendToken\n     * @param {FaceTrackToken} token - FaceTrackToken to send.\n     * @intdocs\n     */\n}","import RequestToken from '../../../../tokens/RequestToken';\nimport RequestAPI from '../../../RequestAPI';\nimport {CommandRequester} from '../../../../CommandRequester';\nimport {Event} from '../../../../events/Event';\nimport {CommandTypes, StreamTypes, HeadTouchEvents, AsyncCommandEvent} from '@jibo/command-protocol';\n\n/**\n * @class HeadTouchToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class HeadTouchToken extends RequestToken<JIBO.v1.HeadTouchRequest> {\n\n    /**\n     * One or more of Jibo's touchpad sensors was touched. \n     * See {@link https://app-toolkit.jibo.com/images/JiboHeadSensors.png} for a diagram of the location of\n     * the six sensors\n     * @name HeadTouchToken#HeadTouchEvent\n     * @type {Event}\n     */\n    public update:Event<boolean[]>;\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: JIBO.v1.HeadTouchRequest) {\n        super(owner, protocol);\n        this.update = new Event('Update of head touch status');\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        //handle ack\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        //handle event\n        const message = event.EventBody;\n        switch (message.Event) {\n            case AsyncCommandEvent.Stop:\n                this.isComplete = true;\n                this._complete.resolve();\n                break;\n            case AsyncCommandEvent.Error:\n                this.isComplete = true;\n                this._complete.reject();\n                break;\n            case HeadTouchEvents.HeadTouched:\n                this.update.emit(message.Pads);\n                break;\n        }\n    }\n}\n\n/**\n * Internal HeadTouch class\n * @class CommandRequester.perception.subscribe.HeadTouch\n * @intdocs\n */\nexport class HeadTouch extends RequestAPI<JIBO.v1.HeadTouchRequest, HeadTouchToken> {\n\n    /**\n     * Generate Head Touch Protocol\n     * @method CommandRequester.perception.subscribe.HeadTouch#generateProtocol\n     * @returns {HeadTouchRequest}\n     * @intdocs\n     */\n    static generateProtocol(): JIBO.v1.HeadTouchRequest {\n        return {\n            Type: CommandTypes.Subscribe,\n            StreamType: StreamTypes.HeadTouch,\n            StreamFilter: {},\n        };\n    }\n\n    /**\n     * Create HeadTouchToken from HeadTouchRequest protocol.\n     * @method CommandRequester.perception.subscribe.HeadTouch#generateToken\n     * @param {HeadTouchRequest} protocol - HeadTouchRequest protocol to generate a HeadTouchToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated HeadTouchToken should also be sent as a request.\n     * @return {HeadTouchToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.HeadTouchRequest, andSend=false): HeadTouchToken {\n        const token = new HeadTouchToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send HeadTouchToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.perception.subscribe.HeadTouch#sendToken\n     * @param {HeadTouchToken} token - HeadTouchToken to send.\n     * @intdocs\n     */\n}\n","import {CommandRequester} from '../../../../CommandRequester';\nimport RequestAPI from '../../../RequestAPI';\nimport RequestToken from '../../../../tokens/RequestToken';\nimport {Event} from '../../../../events/Event';\nimport {MotionEvents, CommandTypes, StreamTypes} from '@jibo/command-protocol';\n\n/**\n * @class MotionToken\n * @extends RequestToken\n * @hideconstructor\n */\nexport class MotionToken extends RequestToken<JIBO.v1.MotionRequest, never> {\n    /**\n     * @name MotionToken#update\n     * @type {Event}\n     */\n    public update:Event<JIBO.v1.MotionEntity[]>;\n\n    constructor(owner:CommandRequester, protocol: JIBO.v1.MotionRequest) {\n        super(owner, protocol);\n        this.update = new Event('Update of motion entities');\n    }\n\n    /**\n     * @private\n     */\n    public handleAck(ack:JIBO.v1.Acknowledgement) {\n        if (ack.Response.ResponseCode >= 400) {\n            this.isComplete = true;\n            this._complete.reject(ack.Response);\n            return;\n        }\n    }\n\n    /**\n     * @private\n     */\n    public handleEvent(event:JIBO.v1.EventMessage) {\n        const message = event.EventBody;\n        switch (message.Event) {\n            case MotionEvents.MotionDetected:\n                this.update.emit(message.Motions);\n                break;\n        }\n    }\n}\n\n/**\n * Internal Motion class\n * @class CommandRequester.perception.subscribe.Motion\n * @intdocs\n */\nexport class Motion extends RequestAPI<JIBO.v1.MotionRequest, MotionToken> {\n\n    /**\n     * Generate Motion Track Protocol\n     * @method CommandRequester.perception.subscribe.Motion#generateProtocol\n     * @returns {MotionRequest}\n     * @intdocs\n     */\n    static generateProtocol(): JIBO.v1.MotionRequest {\n        return {\n            Type: CommandTypes.Subscribe,\n            StreamType: StreamTypes.Motion,\n            StreamFilter: {}\n        };\n    }\n\n    /**\n     * Create MotionToken from MotionRequest protocol.\n     * @method CommandRequester.perception.subscribe.Motion#generateToken\n     * @param {MotionRequest} protocol - MotionRequest protocol to generate a MotionToken from.\n     * @param {boolean} [andSend=false] - `true` if the generated MotionToken should also be sent as a request.\n     * @return {MotionToken}\n     * @intdocs\n     */\n    public generateToken(protocol: JIBO.v1.MotionRequest, andSend=false): MotionToken {\n        const token = new MotionToken(this.owner, protocol);\n        if (andSend) {\n            super.sendToken(token);\n        }\n        return token;\n    }\n\n    /**\n     * Send MotionToken request.\n     * <p>NOTE: Implementation in base class {@link RequestAPI}</p>\n     * @method CommandRequester.perception.subscribe.Motion#sendToken\n     * @param {MotionToken} token - MotionToken to send.\n     * @intdocs\n     */\n}","import {generateTransactionID} from '../../UUID';\n\n\n/**\n * @namespace Requester.v2.display\n * @intdocs\n */\nexport class Display {\n\n    /**\n     * Generates Display Protocol. See [Phoenix RCP](https://github.jibo.com/phoenix/jibo-command-protocol) for `JIBO` docs.\n     * @method Requester.v2.display#generateProtocol\n     * @param {string} name - Unique name of the Display.\n     * @param {(JIBO.v2.behaviors.EyeDisplay | JIBO.v2.behaviors.NoneDisplay | JIBO.v2.behaviors.MenuDisplay | JIBO.v2.behaviors.Image | JIBO.v2.behaviors.PhotoGallery | JIBO.v2.behaviors.LoopMembersMenu | JIBO.v2.behaviors.SkillDisplay | JIBO.v2.behaviors.TextDisplay)} view - The view to be displayed.\n     * @param {(0 | 1 | 2 | 3 | 4)} layer - Which layer the Display will be active on.\n     * @param {boolean} visible - If `visible` is `false`, the display will not show until a ShowDisplayAction is called on it.\n     * @param {boolean} keepDisplay - If `keepDisplay` is `true`, the display will stay upon completion until removed (?)\n     * @param {JIBO.v2.behaviors.Action[]} onCancel - Action handlers for when the Display is cancelled.\n     * @param {(\"dim\" | \"clear\")} [overlay] - Overlay options for the Display.\n     * @returns {JIBO.v2.behaviors.Display}\n     */\n    static generateProtocol(\n        name: string,\n        view: JIBO.v2.behaviors.EyeDisplay | JIBO.v2.behaviors.NoneDisplay | JIBO.v2.behaviors.MenuDisplay | JIBO.v2.behaviors.Image | JIBO.v2.behaviors.PhotoGallery | JIBO.v2.behaviors.LoopMembersMenu | JIBO.v2.behaviors.SkillDisplay | JIBO.v2.behaviors.TextDisplay,\n        layer: 0 | 1 | 2 | 3 | 4,\n        visible: boolean,\n        keepDisplay: boolean,\n        onCancel: JIBO.v2.behaviors.Action[],\n        overlay?: \"dim\" | \"clear\"\n    ): JIBO.v2.behaviors.Display {\n        return {\n            id: generateTransactionID(),\n            type: \"DISPLAY\",\n            name,\n            view,\n            layer,\n            overlay,\n            visible,\n            keepDisplay,\n            onCancel\n        };\n    }\n}\n\n","import {generateTransactionID} from '../../UUID';\n\n\n\n/**\n * @namespace Requester.v2.listen\n * @intdocs\n */\nexport class Listen {\n\n    /**\n     * Generates Listen Protocol. See [Phoenix RCP](https://github.jibo.com/phoenix/jibo-command-protocol) for `JIBO` docs.\n     * @method Requester.v2.listen#generateProtocol\n     * @param {(string|string[])} ruleContext - Robust Parser Rules / Dialog Flow Agents we're listening for.\n     * @param {JIBO.v2.behaviors.Intent[]} intents - Dialog Flow intents\n     * @returns {JIBO.v2.behaviors.Listen}\n     */\n    static generateProtocol(rules: string | string[], intents?: JIBO.v2.behaviors.Intent[]): JIBO.v2.behaviors.Listen {\n        const contexts = Array.isArray(rules) ? rules : [rules];\n        return {\n            id: generateTransactionID(),\n            type: \"LISTEN\",\n            contexts,\n            intents\n        };\n    }\n}","import {generateTransactionID} from '../../UUID';\n\n\n\n/**\n * @namespace Requester.v2.play\n * @intdocs\n */\nexport class Play {\n\n    /**\n     * Generates Play Protocol. See [Phoenix RCP](https://github.jibo.com/phoenix/jibo-command-protocol) for `JIBO` docs.\n     * @method Requester.v2.play#generateProtocol\n     * @param {string} esml - ESML string to be spoken.\n     * @param {(string|Object)} [config] - AutoRule configuration options for the Play request.\n     * @param {Object} [options] - Speak options for the Play request.\n     * @returns {JIBO.v2.behaviors.Play}\n     */\n    static generateProtocol(esml: string, config?: string | Object, options?: Object): JIBO.v2.behaviors.Play {\n        return {\n            id: generateTransactionID(),\n            type: \"PLAY\",\n            autoRuleConfig: config,\n            speakOptions: options,\n            esml\n        };\n    }\n}","import {generateTransactionID} from '../../UUID';\n\n\n/**\n * @namespace Requester.v2.slim\n * @intdocs\n */\nexport class SLIM {\n\n    /**\n     * Generates SLIM Protocol. See [Phoenix RCP](https://github.jibo.com/phoenix/jibo-command-protocol) for `JIBO` docs.\n     * @method Requester.v2.slim#generateProtocol\n     * @param {JIBO.v2.behaviors.SLIMConfig} config - What components will comprise the SLIM.\n     * @param {JIBO.v2.behaviors.SLIMOptions} [options] - Configuration options for the SLIM.\n     * @returns {JIBO.v2.behaviors.SLIM}\n     */\n    static generateProtocol(config: JIBO.v2.behaviors.SLIMConfig, options?: JIBO.v2.behaviors.SLIMOptions): JIBO.v2.behaviors.SLIM {\n        return {\n            id: generateTransactionID(),\n            type: \"SLIM\",\n            config,\n            options\n        };\n    }\n}","import { generateTransactionID } from '../../../UUID';\n\n\n/**\n * @class Requester.v2.emotion.ImpactEmotion\n * @intdocs\n */\nexport class ImpactEmotion {\n\n    /**\n     * Generates ImpactEmotion Protocol. See [Phoenix RCP](https://github.jibo.com/phoenix/jibo-command-protocol) for `JIBO` docs.\n     * @method Requester.v2.emotion.ImpactEmotion#generateProtocol\n     * @param {(\"NONE\" | \"LOW_POS\" | \"MEDIUM_POS\" | \"HIGH_POS\" | \"LOW_NEG\" | \"MEDIUM_NEG\" | \"HIGH_NEG\")} [valence] - Impact the valence axis\n     * @param {(\"NONE\" | \"LOW_POS\" | \"MEDIUM_POS\" | \"HIGH_POS\" | \"LOW_NEG\" | \"MEDIUM_NEG\" | \"HIGH_NEG\")} [confidence] - Impact the confidence axis\n     * @returns {JIBO.v2.behaviors.ImpactEmotion}\n     */\n    static generateProtocol(\n        valence?: \"NONE\" | \"LOW_POS\" | \"MEDIUM_POS\" | \"HIGH_POS\" | \"LOW_NEG\" | \"MEDIUM_NEG\" | \"HIGH_NEG\",\n        confidence?: \"NONE\" | \"LOW_POS\" | \"MEDIUM_POS\" | \"HIGH_POS\" | \"LOW_NEG\" | \"MEDIUM_NEG\" | \"HIGH_NEG\"\n    ): JIBO.v2.behaviors.ImpactEmotion {\n        return {\n            id: generateTransactionID(),\n            type: \"IMPACT_EMOTION\",\n            valence,\n            confidence\n        };\n    }\n}","/**\n * @namespace Requester.v2.emotion\n * @intdocs\n */\n\nexport * from './ImpactEmotion';","import * as structural from './structural';\nimport * as emotion from './emotion';\nimport * as perception from './perception';\nimport * as play from './Play';\nimport * as listen from './Listen';\nimport * as display from './Display';\nimport * as slim from './SLIM';\n\n/**\n * @description Namespace for the v2 RCP protocol.\n * </br> See [Phoenix RCP](https://github.jibo.com/phoenix/jibo-command-protocol) for all `JIBO` docs.\n * @namespace Requester.v2\n * @intdocs\n */\n\nexport {\n    play,\n    listen,\n    display,\n    slim,\n    perception,\n    emotion,\n    structural\n};\n","import { generateTransactionID } from '../../../UUID';\n\n\n/**\n * @class Requester.v2.perception.SetPresentPerson\n * @intdocs\n */\nexport class SetPresentPerson {\n\n    /**\n     * Generates SetPresentPerson Protocol. See [Phoenix RCP](https://github.jibo.com/phoenix/jibo-command-protocol) for `JIBO` docs.\n     * @method Requester.v2.perception.SetPresentPerson#generateProtocol\n     * @param {string} looperId - Loop member's ID\n     * @param {(\"VOICE\" | \"FACE\" | \"USER_OVERRIDE\")} source - Source of the ID\n     * @param {number} confidence - Confidence level in this claim of presence\n     * @returns {JIBO.v2.behaviors.SetPresentPerson}\n     */\n    static generateProtocol(\n        looperId: string,\n        source: \"VOICE\" | \"FACE\" | \"USER_OVERRIDE\",\n        confidence: number\n    ): JIBO.v2.behaviors.SetPresentPerson {\n        return {\n            id: generateTransactionID(),\n            type: \"SET_PRESENT_PERSON\",\n            looperId,\n            source,\n            confidence\n        };\n    }\n}","/**\n * @namespace Requester.v2.perception\n * @intdocs\n */\n\nexport * from './SetPresentPerson';","import { generateTransactionID } from '../../../UUID';\n\n\n/**\n * @class Requester.v2.structural.Parallel\n * @intdocs\n */\nexport class Parallel {\n\n    /**\n     * Generates Parallel Protocol. See [Phoenix RCP](https://github.jibo.com/phoenix/jibo-command-protocol) for `JIBO` docs.\n     * @method Requester.v2.structural.Parallel#generateProtocol\n     * @param {JIBO.v2.behaviors.Behavior[]} behaviors - Behaviors to execute in parallel\n     * @param {JIBO.v2.behaviors.Behavior[]} [succeedOnFirst=false] - `true` if the entire behavior should succeed when the child who suceeds first does.\n     * @returns {JIBO.v2.behaviors.Parallel}\n     */\n    static generateProtocol(behaviors: JIBO.v2.behaviors.Behavior[], succeedOnFirst=false): JIBO.v2.behaviors.Parallel {\n        return {\n            id: generateTransactionID(),\n            type: \"PARALLEL\",\n            children: behaviors,\n            succeedOnFirst\n        };\n    }\n}","import {generateTransactionID} from '../../../UUID';\n\n\n/**\n * @class Requester.v2.structural.Sequence\n * @intdocs\n */\nexport class Sequence {\n\n    /**\n     * Generates Sequence Protocol. See [Phoenix RCP](https://github.jibo.com/phoenix/jibo-command-protocol) for `JIBO` docs.\n     * @method Requester.v2.structural.Sequence#generateProtocol\n     * @param {JIBO.v2.behaviors.Behavior[]} behaviors - Behaviors to execute in sequence\n     * @returns {JIBO.v2.behaviors.Sequence}\n     */\n    static generateProtocol(behaviors: JIBO.v2.behaviors.Behavior[]): JIBO.v2.behaviors.Sequence {\n        return {\n            id: generateTransactionID(),\n            type: \"SEQUENCE\",\n            children: behaviors\n        };\n    }\n}","/**\n * @namespace Requester.v2.structural\n * @intdocs\n */\n\nexport * from './Parallel';\nexport * from './Sequence';","import {CommandRequester} from '../CommandRequester';\nimport ExternalPromise from '../utils/ExternalPromise';\n\n//as TypedEvents from jibo-typed-events\n/**\n * Every request has a token with a completion promise and any events relative to that command.\n * @class RequestToken\n */\nexport default abstract class RequestToken<C extends JIBO.v1.BaseCommand, Result = any> {\n    /**\n     * Protocol data to be sent along the websocket.\n     * @private\n     */\n    public protocol:C;\n    /**\n     * Unique id for this request, and any responses to it.\n     * @private\n     */\n    public requestId:string;\n    /**\n     * Internal flag for the CommandRequester to know that it no longer needs to track the token. Must\n     * be updated by subclasses when `complete` resolves.\n     * @private\n     */\n    public isComplete:boolean;\n\n    /**\n     * For subclasses to know where to send cancel requests\n     * @private\n     */\n    public owner:CommandRequester;\n\n    //probably everyone needs to implement this a little different - resolves when command completes\n    //rejects if command is rejected/interrupted\n    protected _complete:ExternalPromise<Result>;\n\n    //subclasses should override this to provide a typed promise\n    /**\n     * Request completion promise.\n     * @method RequestToken#complete\n     */\n    public get complete() {\n        return this._complete.promise;\n    }\n\n    /** @private */\n    constructor(owner:CommandRequester, protocol: C) {\n        this.owner = owner;\n        this.protocol = protocol;\n        this.isComplete = false;\n        this._complete = new ExternalPromise();\n    }\n\n    /**\n     * Cancel the request.\n     * @method RequestToken#cancel\n     */\n    public cancel():void {\n        if (this.isComplete) {\n            return;\n        }\n        this.isComplete = true;\n        this._complete.reject();\n\n        //overwrite the protocol for this token, then send the request\n        const cancel:JIBO.v1.CancelRequest = {\n            Type: \"Cancel\",\n            ID: this.requestId\n        };\n        // Need a unique requestId for the cancel command\n        this.owner.sendRequest(cancel);\n    }\n\n    /**\n     * Internal listener method for handling responses\n     * @private\n     */\n    public abstract handleAck(data:JIBO.v1.Acknowledgement):void;\n\n    /**\n     * Internal listener method for handling responses\n     * @private\n     */\n    public abstract handleEvent(data:JIBO.v1.EventMessage):void;\n}\n","export default class ExternalPromise<T> {\n    public resolve: (d?: T) => any;\n    public reject: (err?: any) => any;\n    public promise: Promise<T>;\n\n    constructor() {\n        this.promise = new Promise<T>((res, rej) => {\n            this.resolve = res;\n            this.reject = rej;\n        });\n    }\n}","export {CommandRequester} from './CommandRequester';\nexport * from './requests';\nimport * as enums from '@jibo/command-protocol';\nexport {enums};\nexport {Event} from './events/Event';\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}